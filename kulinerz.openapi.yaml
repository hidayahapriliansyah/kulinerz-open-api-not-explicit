openapi: "3.0.2"
info:
  title: Kulinerz App
  version: "1.0"
  description: OpenAPI for Kulinerz App contains all of service for customer, resto, location, and image upload.
  termsOfService: https://exampledomain/terms-of-service
  contact:
    email: adimuhamadfirmansyah@gmai.com
    name: Adi Muhamad Firmansyah
    url: hidayahapriliansyah.me
  license:
    name: Kulinerz
    url: https://kulinez.id/licence
servers:
  - url: https://{environment}.exampledomain/api/v2
    description: Server Environment
    variables:
      environment:
        default: dev
        enum:
          - "dev"
          - "qa"
          - "api"
externalDocs:
  url: https://www.notion.so/API-Specs-f5f3dd561cdc4e35a57b6fdc451bcf03
paths:
  /province:
    get:
      tags:
        - Location
      description: Return all province
      security:
        - RestoAccessTokenAuth: []
      responses:
        "200":
          description: Return province list
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            province:
                              type: string
              examples:
                Success:
                  description: Success get all province
                  value:
                    {
                      "success": true,
                      "message": "Getting provinces data successfully.",
                      "data":
                        [
                          { "id": "31", "province": "DKI JAKARTA" },
                          { "id": "32", "province": "JAWA BARAT" },
                          { "id": "33", "province": "JAWA TENGAH" },
                          { "id": "34", "province": "DI YOGYAKARTA" },
                          { "id": "35", "province": "JAWA TIMUR" },
                        ],
                    }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "500":
          $ref: "#/components/responses/ServerError"
  /regency:
    get:
      tags:
        - Location
      description: Return regency list base on selected province
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/ProvinceId"
      responses:
        "200":
          description: Success to get regecy list
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            provinceId:
                              type: string
                            regency:
                              type: string
              example:
                {
                  "success": true,
                  "message": "Getting regencies data successfully.",
                  "data":
                    [
                      {
                        "id": "3204",
                        "provinceId": "32",
                        "regency": "KABUPATEN BANDUNG",
                      },
                      {
                        "id": "3205",
                        "provinceId": "32",
                        "regency": "KABUPATEN GARUT",
                      },
                      {
                        "id": "3206",
                        "provinceId": "32",
                        "regency": "KABUPATEN TASIKMALAYA",
                      },
                    ],
                }
        "404":
          description: Regency from province id provinceId is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Resource not found. Province id provinceId is not exist.",
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "500":
          $ref: "#/components/responses/ServerError"
  /district:
    get:
      tags:
        - Location
      description: Return district list base on selected regency
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - name: regencyId
          in: query
          required: true
          description: Regency id
          schema:
            type: string
            nullable: false
            default:
      responses:
        "200":
          description: Success to get district list
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            regencyId:
                              type: string
                            district:
                              type: string
              example:
                {
                  "success": true,
                  "message": "Getting district data successfully",
                  "data":
                    [
                      {
                        "id": "3206160",
                        "regencyId": "3206",
                        "district": "MANONJAYA",
                      },
                      {
                        "id": "3206161",
                        "regencyId": "3206",
                        "district": "GUNUNGTANJUNG",
                      },
                      {
                        "id": "3206190",
                        "regencyId": "3206",
                        "district": "SINGAPARNA",
                      },
                    ],
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "404":
          description: Regency from province id is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Resource not found. regency id regencyId is not exist.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /village:
    get:
      tags:
        - Location
      description: Return list of village
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - name: districtId
          in: query
          required: true
          description: District Id
          schema:
            type: string
            nullable: false
            default:
      responses:
        "200":
          description: Success to get village list
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            districtId:
                              type: string
                            village:
                              type: string
              example:
                {
                  "success": true,
                  "data":
                    [
                      {
                        "id": "3206161001",
                        "districtId": "3206161",
                        "village": "CINUNJANG",
                      },
                      {
                        "id": "3206161002",
                        "districtId": "3206161",
                        "village": "MALATISUKA",
                      },
                      {
                        "id": "3206161003",
                        "districtId": "3206161",
                        "village": "GIRIWANGI",
                      },
                      {
                        "id": "3206161004",
                        "districtId": "3206161",
                        "village": "JATIJAYA",
                      },
                      {
                        "id": "3206161005",
                        "districtId": "3206161",
                        "village": "GUNUNGTANJUNG",
                      },
                    ],
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "404":
          description: Village from district id is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Resource not found. district id districtId is not exist.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/auth/signin:
    post:
      tags:
        - Resto
        - Resto Auth
      description: API for admin resto to signin via form
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
            example:
              {
                "email": "adimuhamadfirmansyah@gmail.com",
                "password": "rahasiabangetpokoknyahehehehehe",
              }
      responses:
        "200":
          description: Signin Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessSigninResponse"
              example:
                $ref: "#/components/examples/SuccessSigninResponse"
        "404":
          description: Credential error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Credential Error. User is not exist.",
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "email or password body payload is missing.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/auth/signin/google:
    get:
      tags:
        - Resto
        - Resto Auth
      description: API for admin resto to sign in via Google Oauth
      responses:
        "200":
          description: Sigin via oauth is success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessSigninResponse"
              example:
                $ref: "#/components/examples/SuccessSigninResponse"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/auth/signup:
    post:
      tags:
        - Resto
        - Resto Auth
      description: API for admin resto to sign up via form
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/RestoName"
                username:
                  $ref: "#/components/schemas/Username"
                email:
                  $ref: "#/components/schemas/Email"
                password:
                  $ref: "#/components/schemas/Password"
              required:
                - name
                - username
                - email
                - password
            example:
              {
                "name": "Restaurant Example",
                "username": "examplerestaurant",
                "email": "restaurant@gmail.com",
                "password": "password1234!@#$",
              }
      responses:
        "201":
          description: New user resto created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          userId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Signup successfully.",
                  "data": { "userId": "f47ac10b-58cc-4372-a567-0e02b2c3d479" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "Nama restoran minimal memiliki 3 karakter",
                        "field": "name",
                      },
                      { "message": "Email harus diisi", "field": "email" },
                    ],
                }
        "409":
          description: Conflict Error. Duplicate username or email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Username:
                  value:
                    {
                      "success": false,
                      "message": "username is exist. Please use another.",
                    }
                Email:
                  value:
                    {
                      "success": false,
                      "message": "email is exist. Please use another.",
                    }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/auth/signup/google:
    get:
      tags:
        - Resto
        - Resto Auth
      description: API for admin resto to sign in via Google Oauth
      responses:
        "200":
          description: Sigin via oauth is success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessSigninResponse"
              example:
                $ref: "#/components/examples/SuccessSigninResponse"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/auth/signout:
    get:
      tags:
        - Resto
        - Resto Auth
      description: API for admin resto to sign out
      responses:
        "200":
          description: Signout success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIResponse"
              example: { "success": true, "message": "Sign out successfully." }
  /resto/profile:
    get:
      tags:
        - Resto
        - Resto Profile
      description: API to get restaurant profile information
      security:
        - RestoAccessTokenAuth: []
      responses:
        "200":
          description: Success to get profile
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          avatar:
                            type: string
                          username:
                            type: string
                          name:
                            type: string
                          address:
                            nullable: true
                            type: object
                            properties:
                              provinceId:
                                nullable: true
                                type: string
                              regencyId:
                                nullable: true
                                type: string
                              districtId:
                                nullable: true
                                type: string
                              villageId:
                                nullable: true
                                type: string
                              locationLink:
                                nullable: true
                                type: string
                              detail:
                                nullable: true
                                type: string
                          contact:
                            nullable: true
                            type: string
                          imageGallery:
                            type: array
                            items:
                              type: string
                          bussinessHours:
                            type: object
                            properties:
                              openingHours:
                                nullable: true
                                type: string
                              closingHours:
                                nullable: true
                                type: string
                              daysOff:
                                type: array
                                items:
                                  type: string
                          fasilities:
                            type: array
                            items:
                              type: string
              examples:
                Complete:
                  value:
                    {
                      "success": true,
                      "message": "Get restaurant profile data successfully.",
                      "data":
                        {
                          "avatar": "avatar.jpg",
                          "username": "rumahmakancontoh",
                          "name": "Rumah Makan Contoh",
                          "address":
                            {
                              "provinceId": "11",
                              "regencyId": "1101",
                              "districtId": "1101010",
                              "villageId": "1101010001",
                              "locationLink": "https://www.google.com/maps/d/viewer?mid=1LS-Yj--ntUP_auDwGCayJkbNFig&hl=en_US&ll=5.538846584005121%2C95.3387842076674&z=14",
                              "detail": "Kampung apa alamat mana jalan mana bebas",
                            },
                          "contact": "08123456789",
                          "imageGallery":
                            [
                              "http://image.example.com/image1",
                              "http://image.example.com/image2",
                              "http://image.example.com/image3",
                              "http://image.example.com/image4",
                              "http://image.example.com/image5",
                            ],
                          "bussinessHours":
                            {
                              "openingHour": "08:00",
                              "closingHour": "22:00",
                              "daysOff": ["Saturday", "Sunday"],
                            },
                          "fasilities":
                            [
                              "Wi-Fi Gratis",
                              "Area Merokok/Area bebas asap rokok",
                            ],
                        },
                    }
                Uncomplete:
                  value:
                    {
                      {
                        "success": true,
                        "message": "Get restaurant profile data successfully.",
                        "data":
                          {
                            "avatar": "avatar.jpg",
                            "username": "rumahmakancontoh",
                            "name": "Rumah Makan Contoh",
                            "address": null,
                            "contact": "08123456789",
                            "imageGallery": [],
                            "bussinessHours":
                              {
                                "openingHour": "08:00",
                                "closingHour": "22:00",
                                "daysOff": ["Saturday", "Sunday"],
                              },
                            "fasilities": [],
                          },
                      },
                    }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "username harus berupa huruf kecil, number, titik atau underscore.",
                        "field": "username",
                      },
                      {
                        "message": "name harus berupa a-zA-Z 0-9 . , - '",
                        "field": "name",
                      },
                    ],
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      tags:
        - Resto
        - Resto Profile
      description: API to update restaurant profile information
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                avatar:
                  $ref: "#/components/schemas/Avatar"
                username:
                  $ref: "#/components/schemas/Username"
                name:
                  $ref: "#/components/schemas/RestoName"
                villageId:
                  $ref: "#/components/schemas/VillageId"
                locationLink:
                  $ref: "#/components/schemas/RestoLocationLink"
                detail:
                  $ref: "#/components/schemas/RestoDetail"
                contact:
                  $ref: "#/components/schemas/RestoContact"
                imageGallery:
                  $ref: "#/components/schemas/RestoImageGallery"
                openingHour:
                  $ref: "#/components/schemas/RestoOpeningHour"
                closingHour:
                  $ref: "#/components/schemas/RestoClosingHour"
                daysOff:
                  $ref: "#/components/schemas/RestoDaysOff"
                fasilities:
                  $ref: "#/components/schemas/RestoFasilities"
      responses:
        "200":
          description: Success update profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIReturnUserIdResponse"
              example:
                {
                  "success": true,
                  "message": "Update restaurant profile data successfully.",
                  "data": { "userId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "Nama restoran minimal memiliki 3 karakter",
                        "field": "name",
                      },
                      { "message": "Email harus diisi", "field": "email" },
                    ],
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "409":
          $ref: "#/components/responses/RestoConflictError"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/profile/setup/:
    put:
      tags:
        - Resto
        - Resto Profile
      description: API to update restaurant profile information after signnup using oauth
      security:
        - RestoAccessTokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  $ref: "#/components/schemas/Username"
                name:
                  $ref: "#/components/schemas/RestoName"
                password:
                  $ref: "#/components/schemas/Password"
            example:
              {
                "username": "rumahmakancontoh",
                "name": "Rumah Makan Contoh",
                "password": "password1232323",
              }
      responses:
        "200":
          description: Success to setup profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIReturnUserIdResponse"
              example:
                {
                  "success": true,
                  "message": "Update restaurant profile data successfully.",
                  "data": { "userId": "f47ac10b-58cc-4372-a567-0e02b2c3d479" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "username harus berupa huruf kecil, number, titik atau underscore.",
                        "field": "username",
                      },
                      {
                        "message": "name harus berupa a-zA-Z 0-9 . , - '",
                        "field": "name",
                      },
                    ],
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                RestoEmailIsNotVerifiedError:
                  $ref: "#/components/examples/RestoEmailIsNotVerifiedError"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/profile/customer-payment-type:
    put:
      tags:
        - Resto
        - Resto Profile
      description: API to update restaurant customer payment type
      security:
        - RestoAccessTokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                customerPayment:
                  type: string
                  enum:
                    - AFTER_ORDER
                    - BEFORE_ORDER
              required:
                - customerPayment
            example: { "customerPayment": "BEFORE_ORDER" }
      responses:
        "200":
          description: Success update customer payment type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIReturnUserIdResponse"
              example:
                {
                  "success": true,
                  "message": Update restaurant customer payment type successfully.",
                  "data": { "userId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "customerPayment tidak valid.",
                        "field": "customerPayment",
                      },
                    ],
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/account/verification/:
    post:
      tags:
        - Resto
        - Resto Account
      description: API to update restaurant customer payment type
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: "#/components/schemas/Email"
            example: { "email": "restorancontoh@gmail.com" }
      responses:
        "200":
          description: Success to send email verification request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIResponse"
              example:
                {
                  "success": true,
                  "message": "Success sending email verification request to system.",
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": true,
                  "message": "Validation errors in your request.",
                  "errors":
                    [{ "message": "email tidak valid", "field": "email" }],
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/account/verification/{uniqueString}:
    get:
      tags:
        - Resto
        - Resto Account
      description: API to update restaurant customer payment type
      parameters:
        - $ref: "#/components/parameters/UniqueString"
      responses:
        "200":
          description: Success to verify email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIResponse"
              example:
                {
                  "success": true,
                  "message": "Email verification is valid. This account is now verified.Email verification is valid. This account is now verified.",
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "uniqueString param is missing.",
                }
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Verification Not Found:
                  value:
                    {
                      "success": false,
                      "message": "Verification request is not found.",
                    }
                Restaurant Not Found:
                  value:
                    { "success": false, "message": "Restaurant is not found." }
        "409":
          description: Email already verified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Email address already verified. You have already verified your email address.",
                }
        "498":
          description: Request Id (uniqueString) is expired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Request Id is expired. Please make a new verification request.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/account/reset/request:
    post:
      description: API for sending reset password request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: "#/components/schemas/Email"
            example: { "email": "restorancontoh@gmail.com" }
      responses:
        "200":
          description: Success to send reset password request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIResponse"
              example:
                {
                  "success": true,
                  "message": "Success sending reset password request to system",
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "format email tidak valid.",
                        "field": "email",
                      },
                    ],
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/account/reset/{uniqueString}:
    get:
      tags:
        - Resto
        - Resto Account
      description: API to update check reset password reset request
      parameters:
        - $ref: "#/components/parameters/UniqueString"
      responses:
        "200":
          description: Success to verify request reset password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIResponse"
              example:
                {
                  "success": true,
                  "message": "Request password is valid. Please continue to create the new password.",
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "uniqueString param is missing.",
                }
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": false, "message": "Request is not found." }
        "498":
          description: Request Id (uniqueString) is expired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Request Id is expired. Please make a new verification request.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/account/reset/confirmation:
    post:
      tags:
        - Resto
        - Resto Account
      description: Create new password via reset password request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  $ref: "#/components/schemas/Password"
                requestId:
                  type: string
              required:
                - password
                - requestId
            example:
              {
                "password": "newpassword123!@#",
                "requestId": "550e8400-e29b-41d4-a716-44665544000",
              }
      responses:
        "200":
          description: Success to create new password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIResponse"
              example:
                {
                  "success": true,
                  "message": "New password saved successfully. Please continue to sign in.",
                }
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": false, "message": "Request is not found." }
        "498":
          description: Request Id (uniqueString) is expired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Request Id is expired. Please make a new verification request.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/menus/etalase:
    get:
      tags:
        - Resto
        - Resto Menus
      description: API to get restaurant etalase
      security:
        - RestoAccessTokenAuth: []
      responses:
        "200":
          description: Success get all restaurant etalase
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            name:
                              type: string
                          required:
                            - id
                            - name
                    required:
                      - success
                      - message
                      - data
                example:
                  {
                    "success": true,
                    "message": "Success to get elatase data.",
                    "data":
                      [
                        {
                          "id": "550e8400-e29b-41d4-a716-44665544000",
                          "name": "Pedas",
                        },
                        {
                          "id": "550e8400-e29b-41d4-a716-44665544000",
                          "name": "Minuman Segar",
                        },
                      ],
                  }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags:
        - Resto
        - Resto Menus
      description: API to create restaurant etalase
      security:
        - RestoAccessTokenAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CreateAndUpdateEtalase"
      responses:
        "201":
          description: Success to create etalase
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIReturnEtalaseIdResponse"
              example:
                {
                  "success": true,
                  "message": "Success to create etalase",
                  "data":
                    { "etalaseId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/menus/etalase/{etalaseId}:
    put:
      tags:
        - Resto
        - Resto Menus
      description: API to update restaurant etalase
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/EtalaseId"
      requestBody:
        $ref: "#/components/requestBodies/CreateAndUpdateEtalase"
      responses:
        "200":
          description: Success to update etalase
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIReturnEtalaseIdResponse"
              example:
                {
                  "success": true,
                  "message": "Success to update etalase",
                  "data":
                    { "etalaseId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "EetalasId param is missing." }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": false, "message": "Etalase is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - Resto
        - Resto Menus
      description: API to delete restaurant etalase
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/EtalaseId"
      responses:
        "200":
          description: Success to delete etalase
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIReturnEtalaseIdResponse"
              example:
                {
                  "success": true,
                  "message": "Success to delete etalase",
                  "data":
                    { "etalaseId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                EtalaseId param is missing:
                  value:
                    {
                      "success": false,
                      "message": "etalasId param is missing.",
                    }
                Etalase has menu:
                  value:
                    {
                      "success": false,
                      "message": "Etalase with menus can not be deleted. Please ensure the etalase is empty before attempting deletion.",
                    }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": false, "message": "Etalase is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/menus:
    get:
      tags:
        - Resto
        - Resto Menus
      description: API to get all restaurant menus
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/LimitPagination"
        - $ref: "#/components/parameters/PagePagination"
        - name: isActive
          in: query
          required: false
          description: filter menu isActive
          schema:
            type: string
            enum:
              - "0"
              - "1"
      responses:
        "200":
          description: Success get all menus
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          menus:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                name:
                                  type: string
                                isActive:
                                  type: boolean
                                price:
                                  type: number
                              required:
                                - id
                                - name
                                - isActive
                                - price
                          pages:
                            type: number
                            description: Count of many page of data will be divided
                          total:
                            type: number
                            description: Total of all found data
                        required:
                          - menus
                          - pages
                          - total
                    required:
                      - success
                      - message
                      - data
              example:
                {
                  "success": true,
                  "message": "Success to get menus data.",
                  "data":
                    {
                      "menus":
                        [
                          {
                            "_id": "61472bb0804c197c43e92d6a",
                            "name": "Menu apa gituch",
                            "isActive": true,
                            "price": 10000,
                          },
                          {
                            "_id": "61472bb0804c197c43e92d6a",
                            "name": "Menu apa gituch",
                            "isActive": true,
                            "price": 10000,
                          },
                          {
                            "_id": "61472bb0804c197c43e92d6a",
                            "name": "Menu apa gituch",
                            "isActive": true,
                            "price": 10000,
                          },
                          {
                            "_id": "61472bb0804c197c43e92d6a",
                            "name": "Menu apa gituch",
                            "isActive": true,
                            "price": 10000,
                          },
                        ],
                      "pages": 1,
                      "total": 10,
                    },
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags:
        - Resto
        - Resto Menus
      description: API to get all restaurant menus
      security:
        - RestoAccessTokenAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CreateAndUpdateMenu"
      responses:
        "201":
          description: Success to create menu
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          menuId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Creating menu successfully.",
                  "data": { "menuId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ValidationErrorAPIResponse"
                  - $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "name harus berupa a-z A-Z 0-9 . ' -",
                        "field": "name",
                      },
                    ],
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Etalase Id not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": true, "message": "Etalase is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/menus/{slug}:
    get:
      tags:
        - Resto
        - Resto Menus
      description: API to get menu detail by slug
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - name: slug
          in: path
          required: true
          description: Slug of menu title
          schema:
            type: string
      responses:
        "200":
          description: Success to get menu detail
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIResponse"
              example:
                { "success": true, "message": "Success to get menu data." }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Menu not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": true, "message": "Menu is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/menus/{menuId}:
    put:
      tags:
        - Resto
        - Resto Menus
      description: API to update menu
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - name: menuId
          in: path
          description: Menu Id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/CreateAndUpdateMenu"
      responses:
        "200":
          description: Success to update menu
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          menuId:
                            type: string
                        required:
                          - menuId
                    required:
                      - success
                      - message
                      - data
              example:
                {
                  "success": true,
                  "message": "Updating menu successfully.",
                  "data": { "menuId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                Validation Error:
                  value:
                    {
                      "success": false,
                      "message": "Validation errors in your request.",
                      "errors":
                        [
                          {
                            "message": "name harus berupa a-z A-Z 0-9 . ' -",
                            "field": "name",
                          },
                        ],
                    }
                menuId Param Missing:
                  value:
                    { "success": false, "message": "menuId param is missing." }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Etalase Id not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": true, "message": "Etalase is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - Resto
        - Resto Menus
      description: API to update menu
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - name: menuId
          in: path
          description: Menu Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success to delete menu
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          menuId:
                            type: string
                        required:
                          - menuId
                    required:
                      - success
                      - message
                      - data
              example:
                {
                  "success": true,
                  "message": "Deleting menu successfully.",
                  "data": { "menuId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "menuId param is missing." }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Menu not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Menu Id not found. Please input valid id menu.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/custom-menu/categories:
    get:
      tags:
        - Resto
        - Resto Custom Menu
      description: API to get all custom menu category
      security:
        - RestoAccessTokenAuth: []
      responses:
        "200":
          description: Success to get list custom menu categories
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            name:
                              type: string
                          required:
                            - id
                            - name
                    required:
                      - success
                      - message
                      - data
              example:
                {
                  "success": true,
                  "message": "Success to get custom menus data.",
                  "data":
                    [
                      { "_id": "61472bb0804c197c43e92d6a", "name": "Pedas" },
                      { "_id": "61472bb0804c197c43e92d6a", "name": "Minuman" },
                    ],
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags:
        - Resto
        - Resto Custom Menu
      description: API to get create custom menu category
      security:
        - RestoAccessTokenAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CreateAndUpdateCustomMenuCategory"
      responses:
        "200":
          description: Success to create custom menu category
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          customMenuCateogryId:
                            type: string
                        required:
                          - customMenuCateogryId
                    required:
                      - success
                      - message
                      - data
              example:
                {
                  "success": true,
                  "message": "Creating menu successfully.",
                  "data":
                    {
                      "customMenuCategoryId": "550e8400-e29b-41d4-a716-44665544000",
                    },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "name maksimal memiliki 50 karakter.",
                        "field": "name",
                        s,
                      },
                    ],
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/custom-menu/categories/{categoryId}:
    get:
      tags:
        - Resto
        - Resto Custom Menu
      description: API to get specific menu category detail by id
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/CategoryId"
      responses:
        "200":
          description: Success to get custom menu category detail
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: string
                          name:
                            type: string
                          isBungkusAble:
                            type: boolean
                          maxSpicy:
                            type: number
                            nullable: true
                        required:
                          - id
                          - name
                          - isBungkusAble
                          - maxSpicy
                    required:
                      - success
                      - message
                      - data
                example:
                  {
                    "success": true,
                    "message": "Success to get custom menu category data.",
                    "data":
                      {
                        "_id": "61472bb0804c197c43e92d6a",
                        "name": "Minuman",
                        "isBungkusable": true,
                        "maxSpicy": 5,
                      },
                  }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "404":
          description: Custom Menu Category is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Custom menu category is not found.",
                }
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      tags:
        - Resto
        - Resto Custom Menu
      description: API to update specific menu category detail by id
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/CategoryId"
      requestBody:
        $ref: "#/components/requestBodies/CreateAndUpdateCustomMenuCategory"
      responses:
        "200":
          description: Success to update custom menu category
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          customMenuCateogryId:
                            type: string
                        required:
                          - customMenuCateogryId
                    required:
                      - success
                      - message
                      - data
              example:
                {
                  "success": true,
                  "message": "Updating category custom menu successfully.",
                  "data":
                    {
                      "customMenuCategoryId": "550e8400-e29b-41d4-a716-44665544000",
                    },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ValidationErrorAPIResponse"
                  - $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Validation Error:
                  value:
                    {
                      "success": false,
                      "message": "Validation errors in your request.",
                      "errors":
                        [
                          {
                            "message": "name maksimal memiliki 50 karakter.",
                            "field": "name",
                            s,
                          },
                        ],
                    }
                categoryId Param is Missing:
                  value:
                    {
                      "success": false,
                      "message": "categoryId param is missing.",
                    }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": false, "message": "Menu is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - Resto
        - Resto Custom Menu
      description: API to delete specific custom menu category detail by id
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/CategoryId"
      responses:
        "200":
          description: Success to delete custom menu category
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          customMenuCateogryId:
                            type: string
                        required:
                          - customMenuCateogryId
                    required:
                      - success
                      - message
                      - data
              example:
                {
                  "success": true,
                  "message": "Success to delete custom menu category data.",
                  "data":
                    {
                      "customMenuCategoryId": "550e8400-e29b-41d4-a716-44665544000",
                    },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "categoryId param is missing." }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": false, "message": "Menu is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/custom-menu/compositions:
    get:
      tags:
        - Resto
        - Resto Custom Menu
      description: API to get all custom menu composition
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/LimitPagination"
        - $ref: "#/components/parameters/PagePagination"
        - name: category
          in: query
          required: false
          description: Custom menu category id
          schema:
            type: string
        - name: name
          in: query
          required: false
          description: Custom menu composition name
          schema:
            type: string
      responses:
        "200":
          description: Success to get all custom menu composition
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: string
                          name:
                            type: string
                          isBungkusAble:
                            type: boolean
                          maxSpicy:
                            type: number
                            nullable: true
                        required:
                          - id
                          - name
                          - isBungkusAble
                          - maxSpicy
                    required:
                      - success
                      - message
                      - data
                example:
                  {
                    "success": true,
                    "message": "Success to get custom menu compositions data.",
                    "data":
                      {
                        "customMenuCompositions":
                          [
                            {
                              "_id": "61472bb0804c197c43e92d6a",
                              "name": "Cilok",
                              "price": 1000,
                            },
                            {
                              "_id": "61472bb0804c197c43e92d6a",
                              "name": "Bihun",
                              "price": 1000,
                            },
                            {
                              "_id": "61472bb0804c197c43e92d6a",
                              "name": "Bihun",
                              "price": 1000,
                            },
                            {
                              "_id": "61472bb0804c197c43e92d6a",
                              "name": "Bihun",
                              "price": 1000,
                            },
                            {
                              "_id": "61472bb0804c197c43e92d6a",
                              "name": "Bihun",
                              "price": 1000,
                            },
                            {
                              "_id": "61472bb0804c197c43e92d6a",
                              "name": "Bihun",
                              "price": 1000,
                            },
                            {
                              "_id": "61472bb0804c197c43e92d6a",
                              "name": "Bihun",
                              "price": 1000,
                            },
                            {
                              "_id": "61472bb0804c197c43e92d6a",
                              "name": "Bihun",
                              "price": 1000,
                            },
                            {
                              "_id": "61472bb0804c197c43e92d6a",
                              "name": "Bihun",
                              "price": 1000,
                            },
                            {
                              "_id": "61472bb0804c197c43e92d6a",
                              "name": "Bihun",
                              "price": 1000,
                            },
                          ],
                        "pages": 1,
                        "total": 10,
                      },
                  }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Input page is bigger than total pages.",
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "404":
          description: Custom Menu Category is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Custom menu category is not found.",
                }
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags:
        - Resto
        - Resto Custom Menu
      description: API to get all custom menu composition
      security:
        - RestoAccessTokenAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CreateAndUpdateCustomMenuComposition"
      responses:
        "201":
          description: Success to create custom menu composition
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          customMenuCompositionId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Creating menu successfully.",
                  "data":
                    {
                      "customMenuCompositionId": "550e8400-e29b-41d4-a716-44665544000",
                    },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "description minimal memiliki 1 karakter.",
                        "field": "description",
                      },
                      {
                        "message": "image maksimal memiliki 2 item.",
                        "field": "image",
                      },
                    ],
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Custom Menu Category is not found.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/custom-menu/compositions/{compositionId}:
    get:
      tags:
        - Resto
        - Resto Custom Menu
      description: API to get detail custom menu composition by id
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/CustomMenuCompositionId"
      responses:
        "200":
          description: Success to get custom menu composition detail
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: string
                          customMenuCategoryId:
                            type: string
                          description:
                            type: string
                          price:
                            type: number
                          stock:
                            type: number
                          images:
                            nullable: true
                            type: array
                            items:
                              type: string
                        required:
                          - id
                          - customMenuCategoryId
                          - description
                          - price
                          - stock
                          - images
              example:
                {
                  "success": true,
                  "message": "Get custom menu composition successfully",
                  "data":
                    {
                      "_id": "61472bb0804c197c43e92d6a",
                      "customMenuCategoryId": "61472bb0804c197c43e92d6a",
                      "name": "Nama menu",
                      "description": "Menu ini adalah bla blabla",
                      "price": 5000,
                      "stock": 10,
                      "images": ["http://image.example.com/image.jpg"],
                    },
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Composition Custom Menu is not found.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      tags:
        - Resto
        - Resto Custom Menu
      description: API to update custom menu composition by id
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/CustomMenuCompositionId"
      requestBody:
        $ref: "#/components/requestBodies/CreateAndUpdateCustomMenuComposition"
      responses:
        "200":
          description: Success to update custom menu composition
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          customMenuCompositionId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Updating custom menu composition successfully.",
                  "data":
                    {
                      "customMenuCompositionId": "550e8400-e29b-41d4-a716-44665544000",
                    },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ValidationErrorAPIResponse"
                  - $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                compostionId is Missing:
                  value:
                    {
                      "success": false,
                      "message": "compositionId param is missing.",
                    }
                Validation Input Error:
                  value:
                    {
                      "success": false,
                      "message": "Validation errors in your request.",
                      "errors":
                        [
                          {
                            "message": "description minimal memiliki 1 karakter.",
                            "field": "description",
                          },
                          {
                            "message": "image maksimal memiliki 2 item.",
                            "field": "image",
                          },
                        ],
                    }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Custom Menu Composition Not Found:
                  value:
                    {
                      "success": false,
                      "message": "Custom Menu Composition is not found.",
                    }
                Custom Menu Category Not Found:
                  value:
                    {
                      "success": false,
                      "message": "Custom Menu Category is not found.",
                    }
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - Resto
        - Resto Custom Menu
      description: API to delete custom menu composition by id
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/CustomMenuCompositionId"
      responses:
        "200":
          description: Success to delete custom menu composition
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          customMenuCompositionId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Deleting custom menu composition successfully.",
                  "data":
                    {
                      "customMenuCompositionId": "550e8400-e29b-41d4-a716-44665544000",
                    },
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Composition Custom Menu is not found.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/notifications/:
    get:
      tags:
        - Resto
        - Resto Notification
      description: API to get all notification
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/LimitPagination"
        - $ref: "#/components/parameters/PagePagination"
        - name: read
          in: query
          required: false
          description: Status isRead of notifcation with "0" or "1"
          schema:
            type: string
      responses:
        "200":
          description: Success to get all restaurant notification
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          notifications:
                            type: array
                            items:
                              type: string
                          pages:
                            type: number
                            description: Total pages of displayed data
                          total:
                            type: number
                            description: Total count all data
                        required:
                          - notifications
                          - pages
                          - total
                    required:
                      - success
                      - message
                      - data
              example:
                {
                  "success": true,
                  "message": "Success to get notification data.",
                  "data":
                    {
                      "notifications":
                        [
                          {
                            "_id": "61472bb0804c197c43e92d6a",
                            "title": "Title notification 1",
                            "description": "Description notification 1",
                            "isRead": true,
                            "createdAt": "2023-07-20T12:34:56.789Z",
                          },
                          {
                            "_id": "61472bb0804c197c43e92d6a",
                            "title": "Title notification 2",
                            "description": "Description notification 2",
                            "isRead": false,
                            "createdAt": "2023-07-20T12:34:56.789Z",
                          },
                        ],
                      "pages": 1,
                      "total": 2,
                    },
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/notifications/all:
    put:
      tags:
        - Resto
        - Resto Notification
      description: API to update all notification status isRead to be true
      security:
        - RestoAccessTokenAuth: []
      responses:
        "200":
          description: Success to update all notifcation status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIResponse"
              example:
                {
                  "success": true,
                  "message": "Updating all notification read status successfully.",
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/notifications/{notificationId}:
    put:
      tags:
        - Resto
        - Resto Notification
      description: API to get update specific notification status isRead to be true by id
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Succes to update notification status
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          notificationId:
                            type: string
                        required:
                          - notificationId
                    required:
                      - success
                      - message
                      - data
              example:
                {
                  "success": true,
                  "message": "Updating notification status successfully.",
                  "data":
                    { "notificationId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "notificationId param is missing.",
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "Notification is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/notifications/count:
    get:
      tags:
        - Resto
        - Resto Notification
      description: API to get total unred notification
      security:
        - RestoAccessTokenAuth: []
      responses:
        "200":
          description: Success to get total unread notifcation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          unreadNotification:
                            type: number
                        required:
                          - unreadNotification
                    required:
                      - success
                      - message
                      - data
              example:
                {
                  "success": true,
                  "message": "Success to get the number of unread notification data.",
                  "data": { "unreadNotification": 5 },
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/orders/:
    get:
      tags:
        - Resto
        - Resto Orders
      description: API to get all order
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/PagePagination"
        - name: status
          in: query
          required: false
          description: Order status
          schema:
            type: string
            enum:
              - READY_TO_ORDER
              - ACCEPTED_BY_RESTO
              - PROCESSED_BY_RESTO
              - DONE_BY_RESTO
              - ACCEPTED_BY_CUSTOMER
              - CANCEL_BY_RESTO
              - UNPAID
        - name: startDate
          in: query
          required: false
          description: Order filter time start date
          schema:
            type: string
        - name: endDate
          in: query
          required: false
          description: Order filter time end date
          schema:
            type: string
      responses:
        "200":
          description: Success to get order list
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          orders:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                createdAt:
                                  type: string
                                isGroup:
                                  type: boolean
                                customer:
                                  type: object
                                  properties:
                                    username:
                                      type: string
                                    name:
                                      type: string
                                    image:
                                      type: string
                                total:
                                  type: number
                                status:
                                  type: boolean
                                isPaid:
                                  type: boolean
                          pages:
                            type: number
                          total:
                            type: number
              example:
                {
                  "success": true,
                  "message": "Getting order data successfully.",
                  "data":
                    {
                      "orders":
                        [
                          {
                            "_id": "5f8a5c8e8e78d53e610cd75f",
                            "isGroup": false,
                            "customer":
                              {
                                "avatar": "http://image.example.com/image",
                                "username": "melanie",
                                "name": "Melanie",
                              },
                            "total": 8000,
                            "status": "accepted",
                            "isPaid": true,
                            "createdAt": "2023-07-20T12:34:56.789Z",
                          },
                          {
                            "_id": "5f8a5c8e8e78d53e610cd75f",
                            "isGroup": false,
                            "customer":
                              {
                                "avatar": "http://image.example.com/image",
                                "username": "olivia",
                                "name": "Olivia",
                              },
                            "total": 70000,
                            "status": "processed",
                            "isPaid": false,
                            "createdAt": "2023-07-20T12:34:56.789Z",
                          },
                          {
                            "groupBotramOrderId": "5f8a5c8e8e78d53e610cd75f",
                            "isGroup": true,
                            "groupBotram":
                              {
                                "name": "Makan banyak",
                                "adminAvatar": "http://image.example.com/image",
                                "adminUsername": "adi",
                                "adminName": "Adi Hidayah",
                              },
                            "total": 70000,
                            "status": "accepted",
                            "isPaid": true,
                            "createdAt": "2023-07-20T12:34:56.789Z",
                          },
                        ],
                      "pages": 1,
                      "total": 3,
                    },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Page Query Not Number:
                  value:
                    { "success": false, "message": "page query is not number." }
                startDate or endDate  is not valid:
                  value:
                    {
                      "success": false,
                      "message": "startDate or endDate query is not valid.",
                    }
                startDate is greatet than endDate:
                  value:
                    {
                      "success": false,
                      "message": "startDate is greater than endDate.",
                    }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/orders/count:
    get:
      tags:
        - Resto
        - Resto Orders
      description: API to get count order
      security:
        - RestoAccessTokenAuth: []
      responses:
        "200":
          description: Succes to get count order
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderSuccessResponse"
              example:
                {
                  "success": true,
                  "message": "Getting count order data successfully.",
                  "data":
                    {
                      accepted: 5,
                      processed: 5,
                      done: 5,
                      cancel: 5,
                      total: 20,
                    },
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/orders/today:
    get:
      tags:
        - Resto
        - Resto Orders
      description: API to get today order
      security:
        - RestoAccessTokenAuth: []
      responses:
        "200":
          description: Success to get today order
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderSuccessResponse"
              example:
                {
                  "success": true,
                  "message": "Getting count order data successfully.",
                  "data":
                    {
                      accepted: 5,
                      processed: 5,
                      done: 5,
                      cancel: 5,
                      total: 20,
                    },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": true, "message": "page query is not number." }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/orders/find:
    get:
      tags:
        - Resto
        - Resto Orders
      description: API to find order detail by customer username
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - name: customerUsername
          in: query
          required: true
          description: Username of ordered Customer
          schema:
            type: string
      responses:
        "200":
          description: Success to find order by username customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderDetailResponse"
              examples:
                Personal Order:
                  value:
                    $ref: "#/components/examples/PersonalOrderDetailResponse"
                Group Botram Order:
                  value:
                    $ref: "#/components/examples/GroupBotramOrderDetailResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "customerUsername query is missing.",
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                Customer Not Found:
                  value:
                    { "success": false, "message": "Customer is not found." }
                Customer Order Not Found:
                  value:
                    {
                      "success": false,
                      "message": "Customer order is not found.",
                    }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/orders/{orderId}:
    get:
      tags:
        - Resto
        - Resto Orders
      description: API to get order detail by id
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/OrderId"
      responses:
        "200":
          description: Success to get order detail by order id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderDetailResponse"
              examples:
                Personal Order:
                  value:
                    $ref: "#/components/examples/PersonalOrderDetailResponse"
                Group Botram Order:
                  value:
                    $ref: "#/components/examples/GroupBotramOrderDetailResponse"
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": false, "message": "Order is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/orders/{orderId}/status:
    put:
      tags:
        - Resto
        - Resto Orders
      description: API to get order status by id
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/OrderId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - ACCEPTED
                    - PROCESSED
                    - DONE
                    - CANCEL
              required:
                - status
      responses:
        "200":
          description: Success to update order status
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          orderId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Updating order status successfully.",
                  "data": { "orderId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          $ref: "#/components/responses/UpdateOrderStatusBadRequestError"
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": true, "message": "Order is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/orders/{orderId}/paid:
    put:
      tags:
        - Resto
        - Resto Orders
      description: API to update order paid status by id
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/OrderId"
      responses:
        "200":
          description: Success to update order paid status
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          orderId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Updating order payment status successfully.",
                  "data": { "orderId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                orderId param is missing:
                  value:
                    { "success": false, "message": "orderId param is missing." }
                Order has Paid:
                  value:
                    {
                      "success": false,
                      "message": "Order status has been paid.",
                    }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": false, "message": "Order is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/orders/{botramOrderId}/botram/status:
    put:
      tags:
        - Resto
        - Resto Orders
      description: API to update botram order paid status by id
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/BotramOrderId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - ACCEPTED
                    - PROCESSED
                    - DONE
                    - CANCEL
              required:
                - status
      responses:
        "200":
          description: Success to update botram order paid status
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          orderId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Updating order status successfully.",
                  "data":
                    { "botramOrderId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          $ref: "#/components/responses/UpdateOrderStatusBadRequestError"
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "Botram order is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/orders/{botramOrderId}/botram/paid:
    put:
      tags:
        - Resto
        - Resto Orders
      description: API to update botram order paid status by id
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/BotramOrderId"
      responses:
        "200":
          description: Success to update botram order status
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          orderId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Updating order payment status successfully.",
                  "data":
                    { "botramOrderId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                botramOrderId param is missing:
                  value:
                    {
                      "success": false,
                      "message": "botramOrderId param is missing.",
                    }
                Botram Order has Paid:
                  value:
                    {
                      "success": false,
                      "message": "Botram order status has been paid.",
                    }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": true, "message": "Botram order is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/reviews/:
    get:
      tags:
        - Resto
        - Resto Review
      description: API to get all restaurant review
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - name: rating
          in: query
          required: false
          description: rating of review
          schema:
            type: string
            enum:
              - "1"
              - "2"
              - "3"
              - "4"
              - "5"
        - name: isReplied
          in: query
          required: false
          description: isReplied status of review
          schema:
            type: string
            enum:
              - "0"
              - "1"
        - $ref: "#/components/parameters/PagePagination"
      responses:
        "200":
          description: Success to get all review
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            reviews:
                              type: object
                              properties:
                                id:
                                  type: string
                                createdAt:
                                  type: string
                                customer:
                                  type: object
                                  properties:
                                    username:
                                      type: string
                                rating:
                                  type: number
                                reviewDescription:
                                  type: string
                            pages:
                              type: number
                            total:
                              type: number
              example:
                {
                  "success": true,
                  "message": "Getting reviews restaurant data successfully.",
                  "data":
                    {
                      "reviews":
                        [
                          {
                            "_id": "5f8a5c8e8e78d53e610cd75f",
                            "createdAt": "2023-07-23T15:30:45.123Z",
                            "customer": { "username": "melanie" },
                            "rating": 4,
                            "reviewDescription": "loremmmmmmmm",
                          },
                          {
                            "_id": "5f8a5c8e8e78d53e610cd75f",
                            "createdAt": "2023-07-23T15:30:45.123Z",
                            "customer": { "username": "melanie" },
                            "rating": 4,
                            "reviewDescription": "loremmmmmmmm",
                          },
                        ],
                      "page": 1,
                      "total": 125,
                    },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Page Query:
                  value:
                    { "success": false, "message": "page query is not number." }
                Rating Query:
                  value:
                    {
                      "success": false,
                      "message": "rating query is not valid.",
                    }
                isReplied Query:
                  value:
                    {
                      "success": false,
                      "message": "isReplied query is not valid.",
                    }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/reviews/{reviewId}:
    get:
      tags:
        - Resto
        - Resto Review
      description: API to get detail restaurant review by id
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/ReviewId"
      responses:
        "200":
          description: Success to get restaurant review detail
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: string
                          createdAt:
                            type: string
                          customer:
                            type: object
                            properties:
                              username:
                                type: string
                              name:
                                type: string
                          rating:
                            type: number
                          hasCustomerBeenShoppingHere:
                            type: boolean
                          reviewDescription:
                            type: string
                          isReplied:
                            type: boolean
                          restaurantReviewResponse:
                            type: object
                            nullable: true
                            properties:
                              id:
                                type: string
                              createdAt:
                                type: string
                              updatedAt:
                                type: string
                              responseDescription:
                                type: string
              examples:
                Not Replied Review:
                  value:
                    {
                      "success": true,
                      "message": "Get a review data successfully.",
                      "data":
                        {
                          "_id": "5f8a5c8e8e78d53e610cd75f",
                          "createdAt": "2023-07-23T15:30:45.123Z",
                          "customer":
                            { "username": "melanie", "name": "Melanie" },
                          "rating": 4,
                          "hasCustomerBeenShoppingHere": true,
                          "reviewDescription": "loremmmmmmmm",
                          "isReplied": false,
                          "restaurantReviewResponse": null,
                        },
                    }
                Replied Review:
                  value:
                    {
                      "success": true,
                      "message": "Getting today order data successfully.",
                      "data":
                        {
                          "_id": "5f8a5c8e8e78d53e610cd75f",
                          "createdAt": "2023-07-23T15:30:45.123Z",
                          "updatedAt": "2023-07-23T15:30:45.123Z",
                          "customer":
                            { "username": "melanie", "name": "Melanie" },
                          "rating": 4,
                          "hasCustomerBeenShoppingHere": true,
                          "reviewDescription": "loremmmmmmmm",
                          "isReplied": true,
                          "restaurantReviewResponse":
                            {
                              "_id": "5f8a5c8e8e78d53e610cd75f",
                              "createdAt": "2023-07-23T15:30:45.123Z",
                              "updatedAt": "2023-07-23T15:30:45.123Z",
                              "responseDescription": "dfgjdifgjerutuvnjfvdjfhusdfusdfksjdfkjsdfkskdf",
                            },
                        },
                    }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": false, "message": "Review is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/reviews/{reviewId}/reply:
    post:
      tags:
        - Resto
        - Resto Review
      description: API to create restaurant review response
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/ReviewId"
      requestBody:
        $ref: "#/components/requestBodies/CreateAndUpdateReviewResponse"
      responses:
        "201":
          description: Success to create restaurant review response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        properties:
                          responseId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Reply a review successfully.",
                  "data":
                    { "responseId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ValidationErrorAPIResponse"
                  - $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                reviewId param is missing:
                  value:
                    {
                      "success": false,
                      "message": "reviewId param is missing.",
                    }
                Validation Input Payload Error:
                  value:
                    {
                      "success": false,
                      "message": "Validation errors in your request.",
                      "errors":
                        [
                          {
                            "message": "Deskripsi harus memiliki setidaknya 1 karakter.",
                            "field": "responseDescription",
                          },
                        ],
                    }
                Review Already has Response:
                  value:
                    {
                      "success": false,
                      "message": "Review already has response. Fail to create response review.",
                    }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": false, "message": "Review is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/reviews/{responseId}/reply:
    put:
      tags:
        - Resto
        - Resto Review
      description: API to update restaurant review response
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/ReviewResponseId"
      requestBody:
        $ref: "#/components/requestBodies/CreateAndUpdateReviewResponse"
      responses:
        "200":
          description: Success to update restaurant review response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        properties:
                          responseId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Update reply a review successfully.",
                  "data":
                    { "responseId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ValidationErrorAPIResponse"
                  - $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                responseId param is missing:
                  value:
                    {
                      "success": false,
                      "message": "responseId param is missing.",
                    }
                Validation Input Payload Error:
                  value:
                    {
                      "success": false,
                      "message": "Validation errors in your request.",
                      "errors":
                        [
                          {
                            "message": "Deskripsi harus memiliki setidaknya 1 karakter.",
                            "field": "responseDescription",
                          },
                        ],
                    }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "Review response is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - Resto
        - Resto Review
      description: API to delete restaurant review response
      security:
        - RestoAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/ReviewResponseId"
      responses:
        "200":
          description: Success to delete review response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          responseId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Delete reply of restaurant review successfully.",
                  "data":
                    { "responseId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "responseId param is missing." }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "Review response is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /resto/refresh-token/{refreshTokeValidator}/{token}:
    get:
      tags:
        - Resto
        - Resto Refresh Token
      security:
        - RestoAccessTokenAuth: []
      description: Generate new access token through refresh token
      parameters:
        - name: refreshTokeValidator
          in: path
          required: true
          description: Generate code because access token is expired
          schema:
            type: string
        - name: token
          in: path
          required: true
          description: The actual refresh token
          schema:
            type: string
      responses:
        "200":
          description: Success to get new access token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          userId:
                            type: string
                            description: new generated contain resto id token
              example:
                {
                  "success": true,
                  "message": "Refresh token is valid.",
                  "data": { "userId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "500":
          $ref: "#/components/responses/ServerError"
  # customer route
  /auth/signup:
    post:
      tags:
        - Customer
        - Customer Auth
      description: Sign up for new customer user account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 50
                  pattern: /^[a-zA-Z.,_\s-']+$/
                username:
                  type: string
                  minLength: 3
                  maxLength: 30
                  pattern: /^[a-z0-9._]+$/
                email:
                  type: string
                  maxLength: 254
                password:
                  type: string
                  minLength: 6
              required:
                - name
                - username
                - email
                - password
            example:
              {
                "name": "Customer Example",
                "username": "examplerestaurant",
                "email": "customermermer@gmail.com",
                "password": "password1234!@#$",
              }
      responses:
        "201":
          description: Succes to signup and create new user customer account
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          userId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Signup successfully.",
                  "data": { "userId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "Silakan gunakan karakter a-z 0-9 . _",
                        "field": "username",
                      },
                    ],
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /auth/signup/google:
    get:
      tags:
        - Customer
        - Customer Auth
      description: Sign up for new customer user account via oauth
      responses:
        "200":
          description: Signup via oauth is success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessSigninResponse"
              example:
                $ref: "#/components/examples/SuccessSigninResponse"
        "500":
          $ref: "#/components/responses/ServerError"
  /auth/signin:
    post:
      tags:
        - Customer
        - Customer Auth
      description: Signin via form
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
            example:
              {
                "email": "adimuhamadfirmansyah@gmail.com",
                "password": "rahasiabangetpokoknyahehehehehe",
              }
      responses:
        "200":
          description: Signin Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessSigninResponse"
              example:
                $ref: "#/components/examples/SuccessSigninResponse"
        "404":
          description: Credential error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Credential Error. User is not exist.",
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "email or password body payload is missing.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /auth/signin/google:
    get:
      tags:
        - Customer
        - Customer Auth
      description: Signin via oauth
      responses:
        "200":
          description: Signin via oauth is success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessSigninResponse"
              example:
                $ref: "#/components/examples/SuccessSigninResponse"
        "500":
          $ref: "#/components/responses/ServerError"
  /auth/signout:
    get:
      tags:
        - Customer
        - Customer Auth
      description: API for customer to sign out
      responses:
        "200":
          description: Signout success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIResponse"
              example: { "success": true, "message": "Sign out successfully." }
  /profile:
    get:
      tags:
        - Customer
        - Customer Profile
      description: API to get customer profile
      security:
        - CustomerAccessTokenAuth: []
      responses:
        "200":
          description: Success to get customer profile information
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: string
                          username:
                            type: string
                          name:
                            type: string
                          avatar:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Get profile data successfully",
                  "data":
                    {
                      "_id": "550e8400-e29b-41d4-a716-44665544000",
                      "avatar": "http://image.avatar.com/image",
                      "username": "melanie",
                      "name": "Melanie",
                    },
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      tags:
        - Customer
        - Customer Profile
      description: API to update customer profile
      security:
        - CustomerAccessTokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                username:
                  type: string
                  minLength: 3
                  maxLength: 30
                  pattern: /^[a-z0-9._']+$/
                name:
                  type: string
                  minLength: 3
                  maxLength: 50
                  pattern: /^[a-zA-Z.,_\s-]+$/
            example:
              {
                "avatar": "https://apagicu.com/avatar.jpg",
                "username": "rumahmakancontoh",
                "name": "Rumah Makan Contoh",
              }
      responses:
        "200":
          description: Success update profile
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          userId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Update profile successfully.",
                  "data": { "userId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "Username minimal memiliki 3 karakter.",
                        "field": "username",
                      },
                      {
                        "message": "Nama maksimal memiliki 50 karakter.",
                        "field": "name",
                      },
                    ],
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "409":
          $ref: "#/components/responses/CustomerConflictError"
        "500":
          $ref: "#/components/responses/ServerError"
  /profile/joinbotram:
    put:
      tags:
        - Customer
        - Customer Profile
      description: API to update customer join botram setting
      security:
        - CustomerAccessTokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                joinBotram:
                  type: string
                  enum:
                    - DIRECTLY
                    - INVITATION
                    - BYSELF
            example: { "joinBotram": "BYSELF" }
      responses:
        "200":
          description: Success to update join botram setting
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          userId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Update join botram method successfully.",
                  "data": { "userId": "f47ac10b-58cc-4372-a567-0e02b2c3d479" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "'Status valid antara 'DIRECTLY', 'INVITATION', 'BYSELF'",
                        "field": "joinBotram",
                      },
                    ],
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "500":
          $ref: "#/components/responses/ServerError"
  /restaurant/{restaurantUsername}:
    get:
      tags:
        - Customer
        - Customer Restaurant
      description: Find restaurant by username
      security:
        - CustomerAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/RestaurantUsername"
      responses:
        "200":
          description: Success to find restaurant
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: string
                          username:
                            type: string
                          name:
                            type: string
                          avatar:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Find restaurant successfully",
                  "data":
                    {
                      "_id": "615b741fd5afac0012345678",
                      "avatar": "http://image.avatar.com/image",
                      "username": "seblakhah",
                      "name": "Seblak Hah?",
                    },
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "Restaurant is not Found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /restaurant/{restaurantUsername}/profile:
    get:
      tags:
        - Customer
        - Customer Restaurant
      description: Get Restaurant detail information
      security:
        - CustomerAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/RestaurantUsername"
      responses:
        "200":
          description: Success to get restaurant detail
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIReturnUserIdResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: string
                          avatar:
                            type: string
                          username:
                            type: string
                          name:
                            type: string
                          rating:
                            type: object
                            properties:
                              mean:
                                type: number
                              totalReview:
                                type: number
                          isOpenNow:
                            type: boolean
                            nullable: true
                          gallery:
                            type: string
                            nullable: true
                          detail:
                            type: object
                            properties:
                              address:
                                type: string
                                nullable: true
                              contact:
                                type: string
                                nullable: true
                              openingHour:
                                type: string
                                nullable: true
                              closingHour:
                                type: string
                                nullable: true
                              daysOff:
                                type: array
                                items:
                                  type: string
                          fasilities:
                            type: array
                            items:
                              type: string
                          locationLink:
                            type: string
                            nullable: true
              example:
                {
                  "success": true,
                  "message": "Get restaurant profile data successfully",
                  "data":
                    {
                      "_id": "615b741fd5afac0012345678",
                      "avatar": "http://image.avatar.com/image",
                      "username": "melanie",
                      "name": "Seblak Hah?",
                      "isOpenNow": true,
                      "rating":
                        {
                          "mean": restaurant.rating,
                          "totalReview": countRestaurantReview,
                        },
                      "gallery":
                        [
                          "http://image.avatar.com/image",
                          "http://image.avatar.com/image2",
                          "http://image.avatar.com/image3",
                          "http://image.avatar.com/image4",
                        ],
                      "detail":
                        {
                          "address": "Kp. Bantarhuni RT 02 RW 02 Desa/Kec. Gungungtanjung Kabupaten Tasikmalaya",
                          "contact": "081234567890",
                          "openingHour": "10.00",
                          "closingHour": "21:00",
                          "daysOff": ["Sunday"],
                        },
                      "fasilities":
                        [
                          "Area Parkir",
                          "Aksesibilitas Difabel",
                          "Wi-Fi Gratis",
                          "Area Merokok / Bebas Asap Rokok",
                        ],
                      "locationLink": "https://www.google.com/maps?q=Eiffel+Tower,+Paris,+France",
                    },
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "Restaurant is not Found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /restaurant/{restaurantUsername}/menus:
    get:
      tags:
        - Customer
        - Customer Restaurant
      description: Get Restaurant menu information
      security:
        - CustomerAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/RestaurantUsername"

        - name: sortBy
          in: query
          required: false
          description: Sorting filter data
          schema:
            type: string
            default: newest
            enum:
              - newest
              - oldest
              - lowestprice
              - highestprice
        - name: etalaseId
          in: query
          required: false
          description: Filter menu by etalase
          schema:
            type: string
        - $ref: "#/components/parameters/LimitPagination"
        - $ref: "#/components/parameters/PagePagination"
      responses:
        "200":
          description: Success to get restaurant menus
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          menus:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                slug:
                                  type: string
                                name:
                                  type: string
                                image:
                                  type: string
                                price:
                                  type: number
                          pages:
                            type: number
                          total:
                            type: number
              example:
                {
                  "success": true,
                  "message": "Get restaurant menus data successfully",
                  "data":
                    {
                      "menus":
                        [
                          {
                            "_id": "61472bb0804c197c43e92d6a",
                            "slug": "menu-apa-gituch-sjdhfjsdhfjd-3489",
                            "image": "http://image.misal.com/image",
                            "name": "Menu apa gituch",
                            "price": 10000,
                          },
                          {
                            "_id": "61472bb0804c197c43e92d6a",
                            "slug": "menu-apa-gituch-sjdhfjsdhfjd-3489",
                            "image": "http://image.misal.com/image",
                            "name": "Menu apa gituch",
                            "price": 10000,
                          },
                          {
                            "_id": "61472bb0804c197c43e92d6a",
                            "slug": "menu-apa-gituch-sjdhfjsdhfjd-3489",
                            "image": "http://image.misal.com/image",
                            "name": "Menu apa gituch",
                            "price": 10000,
                          },
                          {
                            "_id": "61472bb0804c197c43e92d6a",
                            "slug": "menu-apa-gituch-sjdhfjsdhfjd-3489",
                            "image": "http://image.misal.com/image",
                            "name": "Menu apa gituch",
                            "price": 10000,
                          },
                          {
                            "_id": "61472bb0804c197c43e92d6a",
                            "slug": "menu-apa-gituch-sjdhfjsdhfjd-3489",
                            "image": "http://image.misal.com/image",
                            "name": "Menu apa gituch",
                            "price": 10000,
                          },
                        ],
                      "pages": 1,
                      "total": 5,
                    },
                }
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Limit or Page query is not number:
                  value:
                    {
                      "success": false,
                      "message": "limit or page query is not number.",
                    }
                Page Query Invalid:
                  value:
                    {
                      "success": false,
                      "message": "Input page is bigger than total pages. Please check your page query.",
                    }
                sortBy Query Invalid:
                  value:
                    {
                      "success": false,
                      "message": "sortBy query is not valid.",
                    }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Restaurant Not Found:
                  value:
                    { "success": false, "message": "Restaurant is not Found." }
                Etalase Not Found:
                  value:
                    { "success": false, "message": "Etalase is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /restaurant/{restaurantUsername}/reviews:
    get:
      tags:
        - Customer
        - Customer Restaurant
      description: Get Restaurant review
      security:
        - CustomerAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/RestaurantUsername"
        - name: sortBy
          in: query
          required: false
          description: Sort filter for review
          schema:
            type: string
            default: newest
            enum:
              - newest
              - oldest
              - lowestrating
              - highestrating
        - $ref: "#/components/parameters/LimitPagination"
        - $ref: "#/components/parameters/PagePagination"
      responses:
        "200":
          description: Sucess to get list restaurant reviews
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          userReview:
                            $ref: "#/components/schemas/ReviewRestaurantDetail"
                            nullable: true
                          reviews:
                            type: array
                            items:
                              $ref: "#/components/schemas/ReviewRestaurantDetail"
                          pages:
                            type: number
                          total:
                            type: number
              examples:
                With User Review:
                  value:
                    {
                      "success": true,
                      "message": "Get restaurant profile data successfully",
                      "data":
                        {
                          "userReview":
                            {
                              "_id": "61472bb0804c197c43e92d6a",
                              "rating": 4,
                              "description": "Hello Adi sayang",
                              "reviewer":
                                {
                                  "username": "melanie",
                                  "name": "melanie",
                                  "everShoppingHere": false,
                                },
                            },
                          "reviews":
                            [
                              {
                                "_id": "61472bb0804c197c43e92d6a",
                                "rating": 4,
                                "description": "Hello Adi sayang",
                                "reviewer":
                                  {
                                    "username": "melanie",
                                    "name": "melanie",
                                    "everShoppingHere": false,
                                  },
                              },
                              {
                                "_id": "61472bb0804c197c43e92d6a",
                                "rating": 5,
                                "description": "Hello Adi sayang",
                                "reviewer":
                                  {
                                    "username": "melanie",
                                    "name": "melanie",
                                    "everShoppingHere": true,
                                  },
                              },
                            ],
                          "pages": 1,
                          "total": 10,
                        },
                    }
                Without User Review:
                  value:
                    {
                      "success": true,
                      "message": "Get restaurant profile data successfully",
                      "data":
                        {
                          "userReview": null,
                          "reviews":
                            [
                              {
                                "_id": "61472bb0804c197c43e92d6a",
                                "rating": 4,
                                "description": "Hello Adi sayang",
                                "reviewer":
                                  {
                                    "username": "melanie",
                                    "name": "melanie",
                                    "everShoppingHere": false,
                                  },
                              },
                            ],
                          "pages": 1,
                          "total": 1,
                        },
                    }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Limit or Page query is not number:
                  value:
                    {
                      "success": false,
                      "message": "limit or page query is not number.",
                    }
                sortBy Query Invalid:
                  value:
                    {
                      "success": false,
                      "message": "sortBy query is not valid.",
                    }
                rating Query Invalid:
                  value:
                    {
                      "success": false,
                      "message": "rating query is not  number of 1-5.",
                    }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "Restaurant is not Found." }
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags:
        - Customer
        - Customer Restaurant
      description: Create review
      security:
        - CustomerAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/RestaurantUsername"
      requestBody:
        $ref: "#/components/requestBodies/CreateAndUpdateReview"
      responses:
        "200":
          description: Success to crate review
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          reviewId:
                            type: string
              example:
                {
                  "success": false,
                  "message": "Creating review successfully.",
                  "data": { "reviewId": "Creating review successfully." },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    {
                      "message": "Deskripsi maksimal memiliki 250 karakter.",
                      "field": "description",
                    },
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "Restaurant is not Found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /restaurant/{restaurantUsername}/reviews/{reviewId}:
    put:
      tags:
        - Customer
        - Customer Restaurant
      security:
        - CustomerAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/RestaurantUsername"
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/CreateAndUpdateReview"
      responses:
        "200":
          description: Success to update review
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          reviewId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Updating review successfully.",
                  "data": { "reviewId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ValidationErrorAPIResponse"
                  - $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Validation Input Error:
                  value:
                    {
                      "success": false,
                      "message": "Validation errors in your request.",
                      "errors":
                        {
                          "message": "Deskripsi maksimal memiliki 250 karakter.",
                          "field": "description",
                        },
                    }
                reviewId param is missing:
                  value:
                    {
                      "success": false,
                      "message": "reviewId param is missing.",
                    }
                restaurantUsername param is missing:
                  value:
                    {
                      "success": false,
                      "message": "restaurantUsername param is missing.",
                    }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                Restaurant Not Found:
                  value:
                    { "success": false, "message": "Restaurant is not Found." }
                Review Not Found:
                  value: { "success": false, "message": "Review is not Found." }
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - Customer
        - Customer Restaurant
      security:
        - CustomerAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/RestaurantUsername"
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success to delete review
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          reviewId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Deleting review successfully.",
                  "data": { "reviewId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "reviewId param is missing." }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": false, "message": "Review is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /wishlist:
    get:
      tags:
        - Customer
        - Customer Wishlist
      description: Get wishlist review
      security:
        - CustomerAccessTokenAuth: []
      responses:
        "200":
          description: Get customer wishlist
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            menu:
                              type: object
                              properties:
                                slug:
                                  type: string
                                image:
                                  type: string
                                name:
                                  type: string
                                restaurant:
                                  type: object
                                  properties:
                                    username:
                                      type: string
                                    name:
                                      type: string
              example:
                {
                  "success": true,
                  "message": "Get restaurant profile data successfully",
                  "data":
                    {
                      "totalWishlist": 15,
                      "wishlistCollection":
                        [
                          {
                            "_id": "615b741fd5afac0012345678",
                            "menu":
                              {
                                "slug": "menu-apa-nich-hahahahha",
                                "image": "http://image.example.com/image",
                                "name": "Menu Apa Nich",
                                "restaurant":
                                  {
                                    "username": "seblakhah",
                                    "name": "Seblak Hah",
                                  },
                              },
                          },
                          {
                            "_id": "615b741fd5afac0012345678",
                            "menu":
                              {
                                "slug": "menu-apa-nich-hahahahha",
                                "image": "http://image.example.com/image",
                                "name": "Menu Apa Nich",
                                "restaurant":
                                  {
                                    "username": "seblakhah",
                                    "name": "Seblak Hah",
                                  },
                              },
                          },
                          {
                            "_id": "615b741fd5afac0012345678",
                            "menu":
                              {
                                "slug": "menu-apa-nich-hahahahha",
                                "image": "http://image.example.com/image",
                                "name": "Menu Apa Nich",
                                "restaurant":
                                  {
                                    "username": "seblakhah",
                                    "name": "Seblak Hah",
                                  },
                              },
                          },
                        ],
                    },
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "500":
          $ref: "#/components/responses/ServerError"
  /wishlist/{menuId}:
    post:
      tags:
        - Customer
        - Customer Wishlist
      description: Create wishlist review
      security:
        - CustomerAccessTokenAuth: []
      parameters:
        - name: menuId
          in: path
          required: true
          description: Menu Id to add to wishlist
          schema:
            type: string
      responses:
        "201":
          description: Success to add menu to wishlist
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          wishlistId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Adding menu to wishlist successfully.",
                  "data":
                    { "wishlistId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "menuId param is missing." }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": false, "message": "Menu is not found." }
        "500":
          $ref: "#/components/schemas/ErrorAPIResponse"
    get:
      tags:
        - Customer
        - Customer Wishlist
      description: Check menu included to wishlist
      security:
        - CustomerAccessTokenAuth: []
      parameters:
        - name: menuId
          in: path
          required: true
          description: Menu Id to add to wishlist
          schema:
            type: string
      responses:
        "200":
          description: Success to get status is included to wishlist or not
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      result:
                        type: boolean
              example:
                {
                  "success": true,
                  "message": "Checking successfully.",
                  "result": true,
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "menuId param is missing." }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - Customer
        - Customer Wishlist
      description: Delete menu from wishlist
      security:
        - CustomerAccessTokenAuth: []
      parameters:
        - name: menuId
          in: path
          required: true
          description: Menu Id to add to wishlist
          schema:
            type: string
      responses:
        "200":
          description: Success delete menu from wishlist
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          wishlistId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Remove menu from wishlist successfully.",
                  "data":
                    { "wishlistId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "menuId param is missing." }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": false, "message": "Menu is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /custom-menu:
    get:
      tags:
        - Customer
        - Customer Custom Menu
      security:
        - CustomerAccessTokenAuth: []
      description: Get all custom menu
      responses:
        "200":
          description: Success to get all custom menus
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            createdAt:
                              type: string
                            name:
                              type: string
                            restaurant:
                              type: object
                              properties:
                                id:
                                  type: string
                                name:
                                  type: string
                                username:
                                  type: string
              example:
                {
                  "success": true,
                  "message": "Getting custom menu data successfully.",
                  "data":
                    [
                      {
                        "_id": "550e8400-e29b-41d4-a716-44665544000",
                        "nama": "Custom Menu Enak",
                        "createdAt": "2023-07-20T12:34:56.789Z",
                        "image": "http://image.com/image",
                        "restaurant":
                          {
                            "_id": "5f8a5c8e8e78d53e610cd75f",
                            "username": "seblakhah",
                            "name": "Seblak Hah",
                          },
                      },
                      {
                        "_id": "550e8400-e29b-41d4-a716-44665544000",
                        "nama": "Custom Menu Enak",
                        "createdAt": "2023-07-20T12:34:56.789Z",
                        "image": "http://image.com/image",
                        "restaurant":
                          {
                            "_id": "5f8a5c8e8e78d53e610cd75f",
                            "username": "seblakhah",
                            "name": "Seblak Hah",
                          },
                      },
                    ],
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags:
        - Customer
        - Customer Custom Menu
      security:
        - CustomerAccessTokenAuth: []
      description: Create custom menu
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                restaurantId:
                  type: string
                customMenuCateogryId:
                  type: string
                name:
                  type: string
                  minLength: 1
                  maxLength: 80
                pickedCustomMenuComposition:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                      qty:
                        type: number
                        minimum: 1
                    required:
                      - id
                      - qty
                  minLength: 1
              required:
                - restaurantId
                - customMenuCateogryId
                - name
                - pickedCustomMenuComposition
      responses:
        "201":
          description: Success to create custom menu
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          customMenuId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Creating custom menu successfully.",
                  "data":
                    { "customMenuId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "Nama maksimal memiliki 80 karakter.",
                        "field": "name",
                      },
                      {
                        "message": "restaurantId harus diisi.",
                        "field": "restaurantId",
                      },
                    ],
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Custom Menu Category Not Found:
                  value:
                    {
                      "success": false,
                      "message": "Custom Menu Category is not found.",
                    }
                Custom Menu Composition Not Found:
                  value:
                    {
                      "success": false,
                      "message": "Custom Menu Composition is not found.",
                    }
        "500":
          $ref: "#/components/responses/ServerError"
  /custom-menu/{customMenuId}:
    get:
      tags:
        - Customer
        - Customer Custom Menu
      security:
        - CustomerAccessTokenAuth: []
      description: Get Custom Menu detail by id
      parameters:
        - $ref: "#/components/parameters/CustomMenuId"
      responses:
        "200":
          description: Success to get custom menu detail
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: string
                          name:
                            type: string
                          createdAt:
                            type: string
                          image:
                            type: string
                          restaurant:
                            type: object
                            properties:
                              id:
                                type: string
                              username:
                                type: string
                              name:
                                type: string
                          customMenuCategory:
                            type: object
                            properties:
                              id:
                                type: string
                              name:
                                type: string
                              isBungkusAble:
                                type: boolean
                          pickedCustomMenuComposition:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                customMenuComposition:
                                  type: object
                                  properties:
                                    id:
                                      type: string
                                    name:
                                      type: string
                                    image:
                                      type: string
                                    price:
                                      type: number
              example:
                {
                  "success": true,
                  "message": "Getting custom menu data successfully.",
                  "data":
                    {
                      "_id": "5f8a5c8e8e78d53e610cd75f",
                      "createdAt": "2023-07-20T12:34:56.789Z",
                      "name": "Custom Menu Enak",
                      "image": "http://image.com/image",
                      "restaurant":
                        {
                          "_id": "5f8a5c8e8e78d53e610cd75f",
                          "username": "seblakhah",
                          "name": "Seblak Hah",
                        },
                      "customMenuCateogry":
                        {
                          "_id": "5f8a5c8e8e78d53e610cd75f",
                          "name": "Seblak",
                          "isBungkusAble": true,
                        },
                      "pickedCustomMenuCompositions":
                        [
                          {
                            "_id": "5f8a5c8e8e78d53e610cd75f",
                            "customMenuComposition":
                              {
                                "_id": "5f8a5c8e8e78d53e610cd75f",
                                "image": "http://image.com/image",
                                "name": "Kerupuk kakap",
                                "price": 2000,
                              },
                            "qty": 2,
                          },
                          {
                            "customMenuComposition":
                              {
                                "_id": "5f8a5c8e8e78d53e610cd75f",
                                "image": "http://image.com/image",
                                "name": "Kerupuk kakap",
                                "price": 2000,
                              },
                            "qty": 5,
                          },
                          {
                            "customMenuComposition":
                              {
                                "_id": "5f8a5c8e8e78d53e610cd75f",
                                "image": "http://image.com/image",
                                "name": "Sayur yur",
                                "price": 2000,
                              },
                            "qty": 5,
                          },
                        ],
                    },
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "Custom Menu is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      tags:
        - Customer
        - Customer Custom Menu
      security:
        - CustomerAccessTokenAuth: []
      description: Update Custom Menu detail by id
      parameters:
        - $ref: "#/components/parameters/CustomMenuId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 80
                pickedCustomMenuComposition:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                      qty:
                        type: number
                        minimum: 1
                    required:
                      - name
                      - qty
            example:
              {
                "name": "Seblak Bikinan ku yang paling uncchhh",
                "pickedCustomMenuComposition":
                  [
                    { "_id": "5f8a5c8e8e78d53e610cd75f", "qty": 10 },
                    { "_id": "5f8a5c8e8e78d53e610cd75f", "qty": 1 },
                    { "_id": "5f8a5c8e8e78d53e610cd75f", "qty": 5 },
                  ],
              }
      responses:
        "200":
          description: Success to update custom menu
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          customMenuId:
                            type: string
              example:
                {
                  "success": false,
                  "message": "Update custom menu successfully.",
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ValidationErrorAPIResponse"
                  - $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Validation Input Error:
                  value:
                    {
                      "success": false,
                      "message": "Validation errors in your request.",
                      "errors":
                        [
                          {
                            "message": "Nama maksimal memiliki 80 karakter.",
                            "field": "name",
                          },
                        ],
                    }
                customMenuId param is missing:
                  value:
                    {
                      "success": false,
                      "message": "customMenuId param is missing.",
                    }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "Custom Menu is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - Customer
        - Customer Custom Menu
      security:
        - CustomerAccessTokenAuth: []
      description: Delete Custom Menu by id
      parameters:
        - $ref: "#/components/parameters/CustomMenuId"
      responses:
        "200":
          description: Success to delete custom menu
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          customMenuId:
                            type: string
              example:
                {
                  "success": false,
                  "message": "Delete custom menu successfully.",
                  "data":
                    { "customMenuId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "customMenuId param is missing.",
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "Custom Menu is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /invitations:
    get:
      tags:
        - Customer
        - Customer Invitation
      security:
        - CustomerAccessTokenAuth: []
      description: Get all invitation botram group
      responses:
        "200":
          description: Success to get all invitation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            groupBotram:
                              type: object
                              properties:
                                id:
                                  type: string
                                createdAt:
                                  type: string
                                name:
                                  type: string
                                status:
                                  $ref: "#/components/schemas/BotramGroupStatus"
                                restaurant:
                                  type: object
                                  properties:
                                    id:
                                      type: string
                                    username:
                                      type: string
                                    name:
                                      type: string
              example:
                {
                  "success": true,
                  "message": "Get botram group invitations data successfully.",
                  "data":
                    [
                      {
                        "_id": "5f8a5c8e8e78d53e610cd75f",
                        "groupBotram":
                          {
                            "_id": "5f8a5c8e8e78d53e610cd75f",
                            "createdAt": "2023-07-20T12:34:56.789Z",
                            "name": "Makan Besar gak seeh",
                            "restaurant":
                              {
                                "_id": "5f8a5c8e8e78d53e610cd75f",
                                "username": "seblakhah",
                                "name": "Seblak Hah",
                              },
                            "status": "ordering",
                          },
                      },
                      {
                        "_id": "5f8a5c8e8e78d53e610cd75f",
                        "groupBotram":
                          {
                            "_id": "5f8a5c8e8e78d53e610cd75f",
                            "createdAt": "2023-07-20T12:34:56.789Z",
                            "name": "Makan Besar gak seeh",
                            "restaurant":
                              {
                                "_id": "5f8a5c8e8e78d53e610cd75f",
                                "username": "seblakhah",
                                "name": "Seblak Hah",
                              },
                            "status": "ordering",
                          },
                      },
                    ],
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "500":
          $ref: "#/components/responses/ServerError"
  /invitations/{invitationId}:
    get:
      tags:
        - Customer
        - Customer Invitation
      security:
        - CustomerAccessTokenAuth: []
      description: Get specific invitaion botram group
      parameters:
        - $ref: "#/components/parameters/InvitationId"
      responses:
        "200":
          description: Success to get detail invitation botram group
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/BotramGroupHighlightDetail"
              example:
                {
                  "success": true,
                  "message": "Get botram group invitations successfully.",
                  "data":
                    {
                      "_id": "5f8a5c8e8e78d53e610cd75f",
                      "groupBotram":
                        {
                          "_id": "5f8a5c8e8e78d53e610cd75f",
                          "createdAt": "2023-07-20T12:34:56.789Z",
                          "name": "Makan Besar gak seeh",
                          "restaurant":
                            {
                              "_id": "5f8a5c8e8e78d53e610cd75f",
                              "username": "seblakhah",
                              "name": "Seblak Hah",
                            },
                          "admin": { "username": "melanie", "name": "Melanie" },
                          "memberCount": 10,
                        },
                    },
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "Invitation is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      tags:
        - Customer
        - Customer Invitation
      security:
        - CustomerAccessTokenAuth: []
      description: Accept invitation botram group
      parameters:
        - $ref: "#/components/parameters/InvitationId"
      responses:
        "200":
          description: Success to accepet invitation group
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          invitationId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Accept invitation successfully.",
                  "data":
                    { "invitationId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                Email Not Verified:
                  value:
                    $ref: "#/components/examples/CustomerEmailIsNotVerifiedError"
                Customer is Ordering at Other Botram Group:
                  value:
                    {
                      "success": false,
                      "message": "Cannot create botram group. Customer is ordering in active botram group.",
                    }
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Invitation not found:
                  value:
                    { "success": false, "message": "Invitation is not found." }
                Botram group not found:
                  value:
                    {
                      "success": false,
                      "message": "Group Botram is not found.",
                    }
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - Customer
        - Customer Invitation
      security:
        - CustomerAccessTokenAuth: []
      description: Reject invitaion botram group
      parameters:
        - $ref: "#/components/parameters/InvitationId"
      responses:
        "200":
          description: Success to reject invitation botram group
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          invitationId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Reject invitation successfully.",
                  "data":
                    { "invitationId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "invitationId param is missing.",
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "Invitation is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /botram:
    get:
      tags:
        - Customer
        - Customer Botram
      security:
        - CustomerAccessTokenAuth: []
      description: Get all customer botram group
      responses:
        "200":
          description: Success to get all customer botram group
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            createdAt:
                              type: string
                            name:
                              type: string
                            restaurant:
                              type: object
                              properties:
                                id:
                                  type: string
                                username:
                                  type: string
                                name:
                                  type: string
                            status:
                              $ref: "#/components/schemas/BotramGroupStatus"
                            memberStatus:
                              type: string
                              enum:
                                - admin
                                - member
              example:
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags:
        - Customer
        - Customer Botram
      security:
        - CustomerAccessTokenAuth: []
      description: Create botram group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                restaurantId:
                  type: string
                name:
                  type: string
                  minLength: 1
                  maxLength: 30
                members:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                    required:
                      - id
                  maxItems: 50
              required:
                - restaurantId
                - name
                - members
      responses:
        "201":
          description: Success to create botram group
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          botramGroupId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Create botram group successfully.",
                  "data":
                    { "botramGroupId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "Anggota members maksimal 50 orang.",
                        "field": "members",
                      },
                    ],
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                Email Not Verified:
                  value:
                    $ref: "#/components/examples/CustomerEmailIsNotVerifiedError"
                Customer is Ordering at Other Botram Group:
                  value:
                    {
                      "success": false,
                      "message": "Cannot create botram group. Customer is ordering in active botram group.",
                    }
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Restaurant Not Found:
                  value:
                    { "success": false, "message": "Restaurant is not found." }
                Customer Not Found:
                  value:
                    { "success": false, "message": "Customer is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /botram/{customerUsername}/customer:
    get:
      tags:
        - Customer
        - Customer Botram
      security:
        - CustomerAccessTokenAuth: []
      description: Find customer to be added to botram group
      parameters:
        - name: customerUsername
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success to get customer
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      name:
                        type: string
                      avatar:
                        type: string
              example:
                {
                  "success": true,
                  "message": "Find customer sucessfully.",
                  "data":
                    {
                      "_id": "550e8400-e29b-41d4-a716-44665544000",
                      "username": "customerUsername",
                      "name": "Customer Name",
                      "avatar": "https://image.com/expamle/",
                    },
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": false, "message": "Customer is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /botram/{botramId}:
    get:
      tags:
        - Customer
        - Customer Botram
      security:
        - CustomerAccessTokenAuth: []
      description: Get specific customer botram group detail
      parameters:
        - $ref: "#/components/parameters/BotramId"
      responses:
        "200":
          description: Success to get customer botram group detail
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: "#/components/schemas/BotramGroupHighlightDetail"
                          - type: object
                            properties:
                              groupBotram:
                                type: object
                                properties:
                                  status:
                                    type: string
                                    description: if (customer is not a member of group botram and customer is not invited botram group status open member open) or (customer is not a member of grop btraom and customer is invited buat botram is not open member), response will show a review of group botram information with status review …, if customer is a member, status will be ordering, all ready order, or other botram valid status. if customer is not a member, and not invited, and botram is not open, nya response na Unauthorized hehehehe.
                                    enum:
                                      - REVIEW
                                      - ORDERING
                    example:
                      {
                        "success": true,
                        "message": "Get botram group information successfully.",
                        "data":
                          {
                            "_id": "5f8a5c8e8e78d53e610cd75f",
                            "createdAt": "2023-07-20T12:34:56.789Z",
                            "name": "Makan Besar gak seeh",
                            "restaurant":
                              {
                                "_id": "5f8a5c8e8e78d53e610cd75f",
                                "username": "seblakhah",
                                "name": "Seblak Hah",
                              },
                            "admin":
                              { "username": "melanie", "name": "Melanie" },
                            "status": "ordering",
                            "memberCount": 10,
                          },
                      }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Email is Not Verified:
                  value:
                    $ref: "#/components/examples/CustomerEmailIsNotVerifiedError"
                Customer is Not Member:
                  value:
                    {
                      "success": false,
                      "message": "Customer is not part of member. Access to this resource is forbidden.",
                    }
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "Botram group is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags:
        - Customer
        - Customer Botram
      security:
        - CustomerAccessTokenAuth: []
      description: Join open membership botram group
      parameters:
        - $ref: "#/components/parameters/BotramId"
      responses:
        "200":
          description: Success to join botram group
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          memberId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Join botram group successfully.",
                  "data": { "memberId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "botramId param is missing." }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                Email Not Verified:
                  value:
                    $ref: "#/components/examples/CustomerEmailIsNotVerifiedError"
                Customer is Ordering at Other Botram Group:
                  value:
                    {
                      "success": false,
                      "message": "Cannot create botram group. Customer is ordering in active botram group.",
                    }
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "Botram group is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      tags:
        - Customer
        - Customer Botram
      security:
        - CustomerAccessTokenAuth: []
      description: Exit from botram group
      parameters:
        - $ref: "#/components/parameters/BotramId"
      responses:
        "200":
          description: Success to exit from botram group.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          memberId:
                            type: string
                example:
                  {
                    "success": false,
                    "message": "Exit botram group successfully.",
                    "data":
                      { "memberId": "550e8400-e29b-41d4-a716-44665544000" },
                  }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                botramId param is missing:
                  value:
                    {
                      "success": false,
                      "message": "botramId param is missing.",
                    }
                Botram Group Order Already Processed:
                  value:
                    {
                      "success": false,
                      "message": "Invalid request. Botram group order already processed. Member can not exit.",
                    }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailAndBotramMemberMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "Botram group is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /botram/{botramId}/members:
    get:
      tags:
        - Customer
        - Customer Botram
      security:
        - CustomerAccessTokenAuth: []
      description: Get member and member order of botram group
      parameters:
        - $ref: "#/components/parameters/BotramId"
      responses:
        "200":
          description: Success to get member and member order
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            description: Botram group id
                            type: string
                          myOrder:
                            nullable: true
                            $ref: "#/components/schemas/BotramMemberOrder"
                          members:
                            type: array
                            items:
                              $ref: "#/components/schemas/BotramMemberOrder"
              example:
                {
                  "success": true,
                  "message": "Get Botram group members information successfully.",
                  "data":
                    {
                      "grouBotramId": "5f8a5c8e8e78d53e610cd75f",
                      "myOrder":
                        {
                          "_id": "5f8a5c8e8e78d53e610cd75f",
                          "username": "hidayah",
                          "name": "HidayahAppp",
                          "status": "orderready",
                          "order":
                            {
                              "_id": "5f8a5c8e8e78d53e610cd75f",
                              "total": "",
                              "isPaid": "",
                              "orderedMenu":
                                [
                                  {
                                    "_id": "5f8a5c8e8e78d53e610cd75f",
                                    "menu":
                                      {
                                        "id": "5f8a5c8e8e78d53e610cd75f",
                                        "name": "Seblak Ceker",
                                        "price": 4000,
                                      },
                                    "quantity": 1,
                                    "totalPrice": 4000,
                                    "isDibungkus": false,
                                    "spicyLevel": { "level": 1 },
                                  },
                                ],
                            },
                        },
                      "members":
                        [
                          {
                            "_id": "5f8a5c8e8e78d53e610cd75f",
                            "username": "hidayah",
                            "name": "HidayahAppp",
                            "status": "orderready",
                            "order":
                              {
                                "_id": "5f8a5c8e8e78d53e610cd75f",
                                "total": "",
                                "isPaid": "",
                                "orderedMenu":
                                  [
                                    {
                                      "_id": "5f8a5c8e8e78d53e610cd75f",
                                      "menu":
                                        {
                                          "id": "5f8a5c8e8e78d53e610cd75f",
                                          "name": "Seblak Ceker",
                                          "price": 4000,
                                        },
                                      "quantity": 1,
                                      "totalPrice": 4000,
                                      "isDibungkus": false,
                                      "spicyLevel": { "level": 1 },
                                    },
                                    {
                                      "_id": "5f8a5c8e8e78d53e610cd75f",
                                      "menu":
                                        {
                                          "id": "5f8a5c8e8e78d53e610cd75f",
                                          "name": "Seblak Ceker",
                                          "price": 4000,
                                        },
                                      "quantity": 1,
                                      "totalPrice": 4000,
                                      "isDibungkus": false,
                                    },
                                  ],
                                "orderedCustomMenu":
                                  [
                                    {
                                      "_id": "5f8a5c8e8e78d53e610cd75f",
                                      "menu":
                                        {
                                          "id": "5f8a5c8e8e78d53e610cd75f",
                                          "name": "Seblak Ceker",
                                          "price": 4000,
                                        },
                                      "quantity": 1,
                                      "totalPrice": 4000,
                                      "isDibungkus": false,
                                      "spicyLevel": { "level": 1 },
                                    },
                                  ],
                              },
                          },
                          {
                            "_id": "5f8a5c8e8e78d53e610cd75f",
                            "username": "hidayah",
                            "name": "HidayahAppp",
                            "status": "ordering",
                            "order": null,
                          },
                        ],
                    },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "botramId param is missing." }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailAndBotramMemberMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "Botram group is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /botram/{botramId}/members/{memberId}/kick:
    put:
      tags:
        - Customer
        - Customer Botram
      security:
        - CustomerAccessTokenAuth: []
      description: Kick member botram by admin
      parameters:
        - $ref: "#/components/parameters/BotramId"
        - $ref: "#/components/parameters/MemberBotramId"
      responses:
        "200":
          description: Success to kick member
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          memberId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Expel member successfully.",
                  "data": { "memberId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                botramId param is missing:
                  value:
                    {
                      "success": false,
                      "message": "botramId param is missing.",
                    }
                memberId param is missing:
                  value:
                    {
                      "success": false,
                      "message": "memberId param is missing.",
                    }
                Botram Group is Not Ordering:
                  value:
                    {
                      "success": false,
                      "message": "Botram group is not ordering. Member can not be expelled.",
                    }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailAndBotramAdminMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Botram Group Not Found:
                  value:
                    {
                      "success": false,
                      "message": "Botram group is not found.",
                    }
                Member Not Found:
                  value: { "success": false, "message": "Member is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /botram/{botramId}/members/{memberId}/paid:
    put:
      tags:
        - Customer
        - Customer Botram
      security:
        - CustomerAccessTokenAuth: []
      description: Kick member botram by admin
      parameters:
        - $ref: "#/components/parameters/BotramId"
        - $ref: "#/components/parameters/MemberBotramId"
      responses:
        "200":
          description: Success to update member paid status
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          memberId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Update member payment status successfully.",
                  "data": { "memberId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                botramId param is missing:
                  value:
                    {
                      "success": false,
                      "message": "botramId param is missing.",
                    }
                memberId param is missing:
                  value:
                    {
                      "success": false,
                      "message": "memberId param is missing.",
                    }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailAndBotramAdminMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Member Not Found:
                  value: { "success": false, "message": "Member is not found." }
                Member Order Not Found:
                  value:
                    {
                      "success": false,
                      "message": "Member order is not found.",
                    }
        "500":
          $ref: "#/components/responses/ServerError"
  /botram/{botramId}/orders:
    post:
      tags:
        - Customer
        - Customer Botram
      security:
        - CustomerAccessTokenAuth: []
      description: Create botram member order
      parameters:
        - $ref: "#/components/parameters/BotramId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrderBodyPayload"
              required:
                - customerNote
                - orderedItemList
      responses:
        "201":
          description: Success to create botram group member order
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          botramMemberOrderId:
                            type: string
              example:
                {
                  "success": false,
                  "message": "Create member order successfully.",
                  "data":
                    {
                      "botramMemberOrderId": "550e8400-e29b-41d4-a716-44665544000",
                    },
                }
        "400":
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ValidationErrorAPIResponse"
                  - $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                Member Already has Order:
                  value:
                    {
                      "success": false,
                      "message": "Member botram sudah memiliki pesanan.",
                    }
                Validation Input Error:
                  value:
                    {
                      "success": false,
                      "message": "Validation errors in your request.",
                      "errors":
                        [
                          {
                            "message": "customerNote maksimal memiliki 100 karakter.",
                            "field": "customerNote",
                          },
                        ],
                    }
                botramId param is missing:
                  value:
                    {
                      "success": false,
                      "message": "botramId param is missing.",
                    }
                Item Runs Out of Stock:
                  value:
                    {
                      "success": false,
                      "message": "Item is run out of stock. Please try again later.",
                    }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailAndMembershipBotramNotFound"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Menu Not Found:
                  value: { "success": false, "message": "Menu is not found." }
                Custom Menu Not Found:
                  value:
                    { "success": false, "message": "Custom menu is not found." }
        "500":
          $ref: "#/components/responses/CustomerAccessTokenError"
    put:
      tags:
        - Customer
        - Customer Botram
      security:
        - CustomerAccessTokenAuth: []
      description: Update Group Botram Status to "ALL_READY_ORDER"
      parameters:
        - $ref: "#/components/parameters/BotramId"
      responses:
        "200":
          description: Success to update botram status to all ready order
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          botramGroupId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Update botram group status to all ready order successfully.",
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "botramId param is missing." }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailAndBotramAdminMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                ["success": false, "message": "Botram group is not found."]
        "500":
          $ref: "#/components/responses/ServerError"
  /cart:
    get:
      tags:
        - Customer
        - Customer Cart
      security:
        - CustomerAccessTokenAuth: []
      description: Get overview cart grouped
      responses:
        "200":
          description: Success to get overview cart grouped
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          mycart:
                            $ref: "#/components/schemas/MyCartResponse"
                          botramCart:
                            nullable: true
                            type: object
                            properties:
                              botramGroup:
                                type: object
                                properties:
                                  name:
                                    type: string
                                  restaurant:
                                    type: object
                                    properties:
                                      id:
                                        type: string
                                      username:
                                        type: string
                                      name:
                                        type: string
                                      image:
                                        type: string
                              totalCartItem:
                                type: number
              example:
                {
                  "success": true,
                  "message": "Get overview cart data successfully.",
                  "data":
                    {
                      "mycart":
                        {
                          "restaurantCount": 2,
                          "cart":
                            [
                              {
                                "restaurant":
                                  {
                                    "_id": "4itrutr8tr8t",
                                    "username": "seblakhah",
                                    "name": "Seblak Hah",
                                    "image": "https://image/ererer.jpg",
                                  },
                                "totalItem": 1,
                              },
                              {
                                "restaurant":
                                  {
                                    "_id": "4itrutr8tr8t",
                                    "username": "seblakhoh",
                                    "name": "Seblak Hoh",
                                    "image": "https://image/ererer.jpg",
                                  },
                                "totalItem": 1,
                              },
                            ],
                        },
                      "botramcart":
                        {
                          "botramGroup":
                            {
                              "name": "Botram Gorup",
                              "resturant":
                                {
                                  "id": "4itrutr8tr8t",
                                  "username": "seblakhoh",
                                  "name": "Seblak Hoh",
                                  "image": "https://image/ererer.jpg",
                                },
                            },
                          "totalCartItem": 2,
                        },
                    },
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "500":
          $ref: "#/components/responses/ServerError"
  /my-cart:
    get:
      tags:
        - Customer
        - Customer My Cart
      security:
        - CustomerAccessTokenAuth: []
      description: Get My Cart
      responses:
        "200":
          description: Success to get my cart
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/MyCartResponse"
              example:
                {
                  "success": true,
                  "message": "Get cart only from my cart successfully.",
                  "data":
                    {
                      "restaurantCount": 2,
                      "cart":
                        [
                          {
                            "restaurant":
                              {
                                "_id": "4itrutr8tr8t",
                                "username": "seblakhah",
                                "name": "Seblak Hah",
                              },
                            "totalItem": 1,
                          },
                          {
                            "restaurant":
                              {
                                "_id": "4itrutr8tr8t",
                                "username": "seblakhoh",
                                "name": "Seblak Hoh",
                              },
                            "totalItem": 1,
                          },
                        ],
                    },
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "500":
          $ref: "#/components/responses/ServerError"
  /my-cart/item:
    post:
      tags:
        - Customer
        - Customer My Cart
      security:
        - CustomerAccessTokenAuth: []
      description: Add Menu to My Cart
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                menu:
                  type: object
                  properties:
                    isCustomMenu:
                      type: boolean
                    id:
                      type: string
                  required:
                    - isCustomMenu
                    - id
                isDibungkus:
                  type: boolean
                quantity:
                  type: number
                spicyLevel:
                  type: number
                  minimum: 0
              required:
                - menu
                - isDibungkus
                - quantity
            example:
              {
                "menu":
                  { "isCustomMenu": false, "id": "615b741fd5afac0012345678" },
                "isDibungkus": true,
                "quantity": 1,
                "spicyLevel": 2,
              }
      responses:
        "201":
          description: Success to add men to My Cart
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          cartItemId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Add item to cart successfully.",
                  "data":
                    { "cartItemId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ValidationErrorAPIResponse"
                  - $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Validation Input Error:
                  value:
                    {
                      "success": false,
                      "message": "Validation errors in your request.",
                      "errors":
                        [
                          {
                            "message": "isDibungkus harus diisi.",
                            "field": "isDibungkus",
                          },
                        ],
                    }
                Item Runs Out of Stock:
                  value:
                    {
                      "success": false,
                      "message": "Item is run out of stock. Please try again later.",
                    }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Menu Not Found:
                  value: { "success": false, "message": "Menu is not found." }
                Custom Menu Not Found:
                  value:
                    { "success": false, "message": "Custom Menu is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /my-cart/detail/{restaurantId}:
    get:
      tags:
        - Customer
        - Customer My Cart
      security:
        - CustomerAccessTokenAuth: []
      description: Get My Cart Item by Restaurant Id
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success to get item from My Cart
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          restaurant:
                            type: object
                            properties:
                              id:
                                type: string
                              username:
                                type: string
                              name:
                                type: string
                          items:
                            $ref: "#/components/schemas/CartItemList"
              example:
                {
                  "success": true,
                  "message": "Get cart only from my cart successfully.",
                  "data":
                    {
                      "restaurant":
                        {
                          "_id": "507f1f77bcf86cd799439011",
                          "username": "seblakhoy",
                          "name": "Seblak Hah",
                        },
                      "items":
                        {
                          "menuCarts":
                            [
                              {
                                "_id": "615b741fd5afac0012345678",
                                "menu":
                                  {
                                    "_id": "615b741fd5afac0012345678",
                                    "name": "Seblak Ceker",
                                    "price": 5000,
                                  },
                                "isDibungkus": false,
                                "quantity": 1,
                                "spicyLevel": 2,
                              },
                              {
                                "_id": "615b741fd5afac0012345678",
                                "menu":
                                  {
                                    "_id": "615b741fd5afac0012345678",
                                    "name": "Es Jeruk",
                                    "price": 2000,
                                  },
                                "isDibungkus": false,
                                "quantity": 1,
                                "spicyLevel": null,
                              },
                            ],
                          "customMenuCarts":
                            [
                              {
                                "_id": "615b741fd5afac0012345678",
                                "customMenu":
                                  {
                                    "_id": "615b741fd5afac0012345678",
                                    "name": "Seblak Favorit ku",
                                    "price": 8000,
                                  },
                                "isDibungkus": true,
                                "quantity": 1,
                                "spicyLevel": { "level": 3 },
                              },
                            ],
                        },
                    },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "restaurantId param is missing.",
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Restaurant Not Found:
                  value:
                    { "success": false, "message": "Restaurant is not found." }
                No Cart Item Found:
                  value: { "success": false, "message": "No cart item found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /my-cart/item/{myCartId}/quantity:
    put:
      tags:
        - Customer
        - Customer My Cart
      security:
        - CustomerAccessTokenAuth: []
      description: Update qty of my cart item
      parameters:
        - $ref: "#/components/parameters/MyCartId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: number
              required:
                - quantity
            example: { "quantity": 9 }
      responses:
        "200":
          description: Success to update qty from My Cart Item
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          cartItemId:
                            type: string
                          isAvailableToAddMore:
                            type: boolean
              example:
                {
                  "success": true,
                  "message": "Update qty of my cart item successfully.",
                  "data":
                    {
                      "cartItemId": "550e8400-e29b-41d4-a716-44665544000",
                      "isAvailableToAddMore": true,
                    },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                myCartId param is missing:
                  value:
                    {
                      "success": false,
                      "message": "myCartId param is missing.",
                    }
                Quantity property is missing:
                  value:
                    {
                      "success": false,
                      "message": "quantity body payload is missing.",
                    }
                Quantity property is not number:
                  value:
                    {
                      "success": false,
                      "message": "quantity body payload is not number.",
                    }
                Item runs out of stock:
                  value:
                    {
                      "success": false,
                      "message": "Item is run out of stock. Please try again later.",
                    }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "Menu cart item is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /my-cart/item/{myCartId}/:
    delete:
      tags:
        - Customer
        - Customer My Cart
      security:
        - CustomerAccessTokenAuth: []
      description: Delete my cart item
      parameters:
        - $ref: "#/components/parameters/MyCartId"
      responses:
        "200":
          description: Success to delete my cart item
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          cartItemId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Delete item from cart successfully.",
                  "data":
                    { "cartItemId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "myCartId param is missing." }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "Menu cart item is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /my-cart/bulk:
    delete:
      tags:
        - Customer
        - Customer My Cart
      security:
        - CustomerAccessTokenAuth: []
      description: Delete bulk my cart item
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                itemIds:
                  type: array
                  items:
                    type: object
                    properties:
                      isCustomMenu:
                        type: boolean
                      id:
                        description: Cart item id
                        type: string
                    required:
                      - isCustomMenu
                      - id
                  minItems: 1
              required:
                - itemIds
            example:
              {
                "itemIds":
                  [
                    { "isCustomeMenu": false, "_id": "3434rter237dfh3343rer" },
                    { "isCustomeMenu": true, "_id": "3434rter237dfh3343rer" },
                  ],
              }
      responses:
        "200":
          description: Success to delete bulk item of cart
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          deletedItemCount:
                            type: number
              example:
                {
                  "success": false,
                  "message": "Removing many item from my cart successfully.",
                  "data": { "deletedItemCount": 5 },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "itemIds setidaknya memiliki 1 item",
                        "field": "itemIds",
                      },
                    ],
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "500":
          $ref: "#/components/responses/ServerError"
  /botram-cart:
    get:
      tags:
        - Customer
        - Customer Botram Cart
      security:
        - CustomerAccessTokenAuth: []
      description: Get Botram Cart
      responses:
        "200":
          description: Success to get botram cart
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        nullable: true
                        type: object
                        properties:
                          botramGroup:
                            type: object
                            properties:
                              name:
                                type: string
                              restaurant:
                                type: object
                                properties:
                                  id:
                                    type: string
                                  name:
                                    type: string
                                  username:
                                    type: string
                                  image:
                                    type: string
                          totalCartItem:
                            type: number
              example:
                {
                  "success": true,
                  "message": "Get cart only from my cart successfully.",
                  "data":
                    {
                      "botramCart":
                        {
                          "botramGroup":
                            {
                              "name": "Nama Botram Group",
                              "restaurant":
                                {
                                  "id": "ID Restoran",
                                  "username": "Username Restoran",
                                  "name": "Nama Restoran",
                                  "image": "URL Gambar Restoran",
                                },
                            },
                          "totalCartItem": 5,
                        },
                    },
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "500":
          $ref: "#/components/responses/ServerError"
  /botram-cart/item:
    post:
      tags:
        - Customer
        - Customer Botram Cart
      security:
        - CustomerAccessTokenAuth: []
      description: Add Menu to Botram Cart
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                botramGroupId:
                  type: string
                menu:
                  type: object
                  properties:
                    isCustomMenu:
                      type: boolean
                    id:
                      type: string
                  required:
                    - isCustomMenu
                    - id
                isDibungkus:
                  type: boolean
                quantity:
                  type: number
                spicyLevel:
                  type: number
                  minimum: 0
              required:
                - botramGroupId
                - menu
                - isDibungkus
                - quantity
            example:
              {
                "botramGroupId": "615b741fd5afac0012345678",
                "menu":
                  { "isCustomMenu": false, "_id": "615b741fd5afac0012345678" },
                "isDibungkus": true,
                "quantity": 1,
                "spicyLevel": 2,
              }
      responses:
        "201":
          description: Success to add menu to Botram Cart
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          cartItemId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Add item to botram cart successfully.",
                  "data":
                    { "cartItemId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ValidationErrorAPIResponse"
                  - $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Validation Input Error:
                  value:
                    {
                      "success": false,
                      "message": "Validation errors in your request.",
                      "errors":
                        [
                          {
                            "message": "isDibungkus harus diisi.",
                            "field": "isDibungkus",
                          },
                        ],
                    }
                Item Runs Out of Stock:
                  value:
                    {
                      "success": false,
                      "message": "Item is run out of stock. Please try again later.",
                    }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Botram Group Not Found:
                  value:
                    {
                      "success": false,
                      "message": "Botram group is not found.",
                    }
                Menu Not Found:
                  value: { "success": false, "message": "Menu is not found." }
                Custom Menu Not Found:
                  value:
                    { "success": false, "message": "Custom Menu is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /botram-cart/detail/{botramGroupId}:
    get:
      tags:
        - Customer
        - Customer Botram Cart
      security:
        - CustomerAccessTokenAuth: []
      description: Get My Cart Item by Botram Group Id
      parameters:
        - name: botramGroupId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success to get item from Botram Cart
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          botramGroup:
                            type: object
                            properties:
                              id:
                                description: Botram group id
                                type: string
                              name:
                                description: Botram group name
                                type: string
                              restaurant:
                                type: object
                                properties:
                                  id:
                                    type: string
                                  username:
                                    type: string
                                  name:
                                    type: string
                          items:
                            $ref: "#/components/schemas/CartItemList"
              example:
                {
                  "success": true,
                  "message": "Get cart only from my cart successfully",
                  "data":
                    {
                      "botramCart": null,
                      "botramGroup":
                        {
                          "_id": "507f1f77bcf86cd799439011",
                          "name": "Makan Besar",
                          "restaurant":
                            {
                              "_id": "507f1f77bcf86cd799439011",
                              "username": "seblakhah",
                              "name": "Seblak Hah?",
                            },
                        },
                      "items":
                        {
                          "menuCarts":
                            [
                              {
                                "_id": "615b741fd5afac0012345678",
                                "menu":
                                  {
                                    "_id": "615b741fd5afac0012345678",
                                    "name": "Seblak Ceker",
                                    "price": 5000,
                                  },
                                "isDibungkus": false,
                                "quantity": 1,
                                "spicyLevel": { "level": 2 },
                              },
                              {
                                "_id": "615b741fd5afac0012345678",
                                "menu":
                                  {
                                    "_id": "615b741fd5afac0012345678",
                                    "name": "Es Jeruk",
                                    "price": 2000,
                                  },
                                "isDibungkus": false,
                                "quantity": 1,
                                "spicyLevel": null,
                              },
                            ],
                          "customMenuCarts":
                            [
                              {
                                "_id": "615b741fd5afac0012345678",
                                "customMenu":
                                  {
                                    "_id": "615b741fd5afac0012345678",
                                    "name": "Seblak Favorit ku",
                                    "price": 8000,
                                  },
                                "isDibungkus": true,
                                "quantity": 1,
                                "spicyLevel": { "level": 3 },
                              },
                            ],
                        },
                    },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "botramGroupId param is missing.",
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Botram Group Not Found:
                  value:
                    {
                      "success": false,
                      "message": "Botram group is not found.",
                    }
                No Cart Item Found:
                  value: { "success": false, "message": "No cart item found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /botram-cart/item/{botramCartId}/quantity:
    put:
      tags:
        - Customer
        - Customer Botram Cart
      security:
        - CustomerAccessTokenAuth: []
      description: Update qty of botram cart item
      parameters:
        - $ref: "#/components/parameters/BotramCartId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: number
              required:
                - quantity
            example: { "quantity": 9 }
      responses:
        "200":
          description: Success to update qty of Botram Cart Item
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          cartItemId:
                            type: string
                          isAvailableToAddMore:
                            type: boolean
              example:
                {
                  "success": true,
                  "message": "Updating quantity of botram cart item successfully.",
                  "data":
                    {
                      "botramCartId": "550e8400-e29b-41d4-a716-44665544000",
                      "isAvailableToAddMore": false,
                    },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                myCartId param is missing:
                  value:
                    {
                      "success": false,
                      "message": "botramCartId param is missing.",
                    }
                Quantity property is missing:
                  value:
                    {
                      "success": false,
                      "message": "quantity body payload is missing.",
                    }
                Quantity property is not number:
                  value:
                    {
                      "success": false,
                      "message": "quantity body payload is not number.",
                    }
                Item runs out of stock:
                  value:
                    {
                      "success": false,
                      "message": "Item is run out of stock. Please try again later.",
                    }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailAndMembershipBotramNotFound"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "Menu cart item is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /botram-cart/item/{botramCartId}:
    delete:
      tags:
        - Customer
        - Customer Botram Cart
      security:
        - CustomerAccessTokenAuth: []
      description: Delete botram cart item
      parameters:
        - $ref: "#/components/parameters/BotramCartId"
      responses:
        "200":
          description: Success to delete botram cart item
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          botramCartId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Delete item from botram cart successfully.",
                  "data":
                    { "botramCartId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "botramCartId param is missing.",
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailAndMembershipBotramNotFound"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "Menu cart item is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /botram-cart/bulk:
    delete:
      tags:
        - Customer
        - Customer Botram Cart
      security:
        - CustomerAccessTokenAuth: []
      description: Delete bulk botram cart item
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                itemIds:
                  type: array
                  items:
                    type: object
                    properties:
                      isCustomMenu:
                        type: boolean
                      id:
                        description: Cart item id
                        type: string
                    required:
                      - isCustomMenu
                      - id
                  minItems: 1
              required:
                - itemIds
            example:
              {
                "itemIds":
                  [
                    { "isCustomeMenu": false, "_id": "3434rter237dfh3343rer" },
                    { "isCustomeMenu": true, "_id": "3434rter237dfh3343rer" },
                  ],
              }
      responses:
        "200":
          description: Success to delete bulk item of cart
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          deletedItemCount:
                            type: number
              example:
                {
                  "success": false,
                  "message": "Removing many item from botram cart successfully.",
                  "data": { "deletedItemCount": 2 },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "itemIds setidaknya memiliki 1 item",
                        "field": "itemIds",
                      },
                    ],
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailAndMembershipBotramNotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders:
    post:
      tags:
        - Customer
        - Customer Order
      security:
        - CustomerAccessTokenAuth: []
      description: Create order
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/CreateOrderBodyPayload"
                - type: object
                  properties:
                    restaurantId:
                      type: string
              required:
                - restaurantId
                - customerNote
                - orderedItemList
            example:
              {
                "restaurantId": "550e8400-e29b-41d4-a716-44665544000",
                "customerNote": "Jangan pedes pedes",
                "orderedItemList":
                  {
                    "menu":
                      [
                        {
                          "_id": "56324erefdfermfk3438e",
                          "quantity": 4,
                          "isDibungkus": false,
                          "spicyLevel": 4,
                        },
                        {
                          "_id": "56324erefdfermfk3438e",
                          "quantity": 1,
                          "isDibungkus": true,
                        },
                      ],
                    "customMenu":
                      [
                        {
                          "_id": "56324erefdfermfk3438e",
                          "quantity": 4,
                          "isDibungkus": false,
                          "spicyLevel": 4,
                        },
                        {
                          "_id": "56324erefdfermfk3438e",
                          "quantity": 1,
                          "isDibungkus": true,
                        },
                      ],
                  },
              }
      responses:
        "201":
          description: Success to create order
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          orderId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Creating order successfully.",
                  "data": { "orderId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ValidationErrorAPIResponse"
                  - $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Validation Input Error:
                  value:
                    {
                      "success": false,
                      "message": "Validation errors in your request.",
                      "errors":
                        [
                          {
                            "message": "customerNote maksimal memiliki 100 karakter.",
                            "field": "customerNote",
                          },
                        ],
                    }
                Item Runs Out of Stock:
                  value:
                    {
                      "success": false,
                      "message": "Item is run out of stock. Please try again later.",
                    }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Restaurant Not Found:
                  value:
                    { "success": false, "message": "Restaurant is not found." }
                Menu Not Found:
                  value: { "success": false, "message": "Menu is not found." }
                Custom Menu Not Found:
                  value:
                    { "success": false, "message": "Custom menu is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
    get:
      tags:
        - Customer
        - Customer Order
      security:
        - CustomerAccessTokenAuth: []
      description: Get order list (not processed)
      responses:
        "200":
          description: Success to get order list
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: "#/components/schemas/OrderListItemNotBotramResponse"
                    - allOf:
                        - $ref: "#/components/schemas/OrderListItemNotBotramResponse"
                        - type: object
                          properties:
                            botramGroup:
                              type: object
                              properties:
                                id:
                                  type: string
                                name:
                                  type: string
              example:
                {
                  "success": true,
                  "message": "Getting purchase data successfully.",
                  "data":
                    {
                      "orders":
                        [
                          {
                            "_id": "5f8a5c8e8e78d53e610cd75f",
                            "createdAt": "2023-07-20T12:34:56.789Z",
                            "isGroup": false,
                            "isPaid": true,
                            "restaurant":
                              {
                                "id": "fsdfsdf",
                                "username": "hello",
                                "name": "Restaurnatname",
                              },
                            "total": 4000,
                            "status": "done",
                          },
                          {
                            "_id": "5f8a5c8e8e78d53e610cd75f",
                            "createdAt": "2023-07-20T12:34:56.789Z",
                            "isGroup": true,
                            "restaurant":
                              {
                                "id": "fsdfsdf",
                                "username": "hello",
                                "name": "Restaurnatname",
                              },
                            "botramGroup":
                              {
                                "_id": "5f8a5c8e8e78d53e610cd75f",
                                "name": "Makan Besar",
                              },
                            "total": 4000,
                            "status": "done",
                          },
                        ],
                      "pages": 10,
                      "total": 120,
                    },
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/{orderId}:
    get:
      tags:
        - Customer
        - Customer Order
      security:
        - CustomerAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/OrderId"
      description: Get order detail
      responses:
        "200":
          description: Success to get detail order by id
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        oneOf:
                          - $ref: "#/components/schemas/OrderDetailItemNotBotramResponse"
                          - $ref: "#/components/schemas/OrderDetailItemBotramResponse"
              example:
                {
                  "success": true,
                  "message": "Getting order data successfully.",
                  "data":
                    {
                      "_id": "5f8a5c8e8e78d53e610cd75f",
                      "createdAt": "2023-07-20T12:34:56.789Z",
                      "isGroup": true,
                      "botramGroup":
                        {
                          "_id": "5f8a5c8e8e78d53e610cd75f",
                          "name": "Makan makan",
                        },
                      "restaurant":
                        { "username": "melanie", "name": "Melanie" },
                      "status": "accepted",
                      "isPaid": true,
                      "orderedMenu":
                        [
                          {
                            "_id": "5f8a5c8e8e78d53e610cd75f",
                            "menu":
                              {
                                "id": "5f8a5c8e8e78d53e610cd75f",
                                "name": "Seblak Ceker",
                                "price": 4000,
                              },
                            "quantity": 1,
                            "totalPrice": 4000,
                            "isDibungkus": false,
                            "spicyLevel": { "level": 1 },
                          },
                        ],
                      "orderedCustomMenu": [],
                    },
                }

        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": false, "message": "Order is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - Customer
        - Customer Order
      security:
        - CustomerAccessTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/OrderId"
      description: Delete unprocessed order
      responses:
        "200":
          description: Success to delete unprocessed order
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          orderId:
                            type: string
              example:
                {
                  "success": true,
                  "message": "Removing order successfully.",
                  "data": { "orderId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "orderId param is missing." }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example: { "success": false, "message": "Order is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /purchase:
    get:
      tags:
        - Customer
        - Customer Purchase
      security:
        - CustomerAccessTokenAuth: []
      description: Get list of Purchased order with status "ACCEPTED_BY_CUSTOMER"
      parameters:
        - $ref: "#/components/parameters/PagePagination"
        - name: startDate
          in: query
          required: false
          description: Filter start date
          schema:
            type: string
        - name: endDate
          in: query
          required: false
          description: Filter start date
          schema:
            type: string
      responses:
        "200":
          description: Success to get list of purchased order
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          orders:
                            type: array
                            items:
                              oneOf:
                                - $ref: "#/components/schemas/PurchaseOrderNotBotramItemResponse"
                                - $ref: "#/components/schemas/PurchaseOrderBotramItemResponse"
                          pages:
                            type: number
                          total:
                            type: number
              example:
                {
                  "success": true,
                  "message": "Getting purchase data successfully.",
                  "data":
                    {
                      "orders":
                        [
                          {
                            "_id": "5f8a5c8e8e78d53e610cd75f",
                            "createdAt": "2023-07-20T12:34:56.789Z",
                            "isGroup": false,
                            "isPaid": true,
                            "restaurant":
                              {
                                "id": "fsdfsdf",
                                "username": "hello",
                                "name": "Restaurnatname",
                              },
                            "total": 4000,
                            "status": "done",
                          },
                          {
                            "_id": "5f8a5c8e8e78d53e610cd75f",
                            "createdAt": "2023-07-20T12:34:56.789Z",
                            "isGroup": true,
                            "restaurant":
                              {
                                "id": "fsdfsdf",
                                "username": "hello",
                                "name": "Restaurnatname",
                              },
                            "botramGroup":
                              {
                                "_id": "5f8a5c8e8e78d53e610cd75f",
                                "name": "Makan Besar",
                              },
                            "total": 4000,
                            "status": "done",
                          },
                        ],
                      "pages": 10,
                      "total": 120,
                    },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "page query is not number." }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "500":
          $ref: "#/components/responses/ServerError"
  /account/verification:
    post:
      tags:
        - Customer
        - Customer Account
      description: API to make customer re email verification request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: "#/components/schemas/Email"
            example: { "email": "customer@gmail.com" }
      responses:
        "200":
          description: Success to send email verification request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIResponse"
              example:
                {
                  "success": true,
                  "message": "Success sending email verification request to system.",
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": true,
                  "message": "Validation errors in your request.",
                  "errors":
                    [{ "message": "email tidak valid", "field": "email" }],
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /account/verification/{uniqueString}:
    get:
      tags:
        - Customer
        - Customer Account
      description: API to verify email customer account
      parameters:
        - $ref: "#/components/parameters/UniqueString"
      responses:
        "200":
          description: Success to verify email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIResponse"
              example:
                {
                  "success": true,
                  "message": "Email verification is valid. This account is now verified.",
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "uniqueString param is missing.",
                }
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              examples:
                Verification Not Found:
                  value:
                    {
                      "success": false,
                      "message": "Verification request is not found.",
                    }
                Customer Not Found:
                  value:
                    { "success": false, "message": "Customer is not found." }
        "409":
          description: Email already verified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Email address already verified. You have already verified your email address.",
                }
        "498":
          description: Request Id (uniqueString) is expired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Request Id is expired. Please make a new verification request.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /account/reset/request:
    post:
      tags:
        - Customer
        - Customer Account
      description: API for sending reset password request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: "#/components/schemas/Email"
            example: { "email": "restorancontoh@gmail.com" }
      responses:
        "200":
          description: Success to send reset password request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIResponse"
              example:
                {
                  "success": true,
                  "message": "Success sending reset password request to system",
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Validation errors in your request.",
                  "errors":
                    [
                      {
                        "message": "format email tidak valid.",
                        "field": "email",
                      },
                    ],
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /account/reset/{uniqueString}:
    get:
      tags:
        - Customer
        - Customer Account
      description: API to update check reset password reset request
      parameters:
        - $ref: "#/components/parameters/UniqueString"
      responses:
        "200":
          description: Success to verify request reset password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIResponse"
              example:
                {
                  "success": true,
                  "message": "Request password is valid. Please continue to create the new password.",
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "uniqueString param is missing.",
                }
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Resest Password Request is not found.",
                }
        "498":
          description: Request Id (uniqueString) is expired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Resest Password Request is expired. Please make a new reset password request.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /account/reset/confirmation:
    post:
      tags:
        - Customer
        - Customer Account
      description: Create new password via reset password request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  $ref: "#/components/schemas/Password"
                requestId:
                  type: string
              required:
                - password
                - requestId
            example:
              {
                "password": "newpassword123!@#",
                "requestId": "550e8400-e29b-41d4-a716-44665544000",
              }
      responses:
        "200":
          description: Success to create new password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIResponse"
              example:
                {
                  "success": true,
                  "message": "New password saved successfully. Please continue to sign in.",
                }
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Reset Password Request is not found.",
                }
        "498":
          description: Request Id (uniqueString) is expired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "Resest Password Request is expired. Please make a new reset password request.",
                }
        "500":
          $ref: "#/components/responses/ServerError"
  /notifications:
    get:
      tags:
        - Customer
        - Customer Notification
      security:
        - CustomerAccessTokenAuth: []
      description: API to get all customer notification
      parameters:
        - $ref: "#/components/parameters/LimitPagination"
        - $ref: "#/components/parameters/PagePagination"
        - name: read
          in: query
          required: false
          description: Status isRead of notifcation with "0" or "1"
          schema:
            type: string
      responses:
        "200":
          description: Success to get all customer notification
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          notifications:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                title:
                                  type: string
                                description:
                                  type: string
                                isRead:
                                  type: boolean
                                createdAt:
                                  type: string
                          pages:
                            type: number
                            description: Total pages of displayed data
                          total:
                            type: number
                            description: Total count all data
                        required:
                          - notifications
                          - pages
                          - total
                    required:
                      - success
                      - message
                      - data
              example:
                {
                  "success": true,
                  "message": "Success to get notification data.",
                  "data":
                    {
                      "notifications":
                        [
                          {
                            "_id": "61472bb0804c197c43e92d6a",
                            "title": "Title notification 1",
                            "description": "Description notification 1",
                            "isRead": true,
                            "createdAt": "2023-07-20T12:34:56.789Z",
                          },
                          {
                            "_id": "61472bb0804c197c43e92d6a",
                            "title": "Title notification 2",
                            "description": "Description notification 2",
                            "isRead": false,
                            "createdAt": "2023-07-20T12:34:56.789Z",
                          },
                        ],
                      "pages": 1,
                      "total": 10,
                    },
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "500":
          $ref: "#/components/responses/ServerError"
  /notifications/all:
    put:
      tags:
        - Customer
        - Customer Notification
      description: API to update all notification status isRead to be true
      security:
        - CustomerAccessTokenAuth: []
      responses:
        "200":
          description: Success to update all notifcation status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAPIResponse"
              example:
                {
                  "success": true,
                  "message": "Updating all notification read status successfully.",
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "500":
          $ref: "#/components/responses/ServerError"
  /notifications/{notificationId}:
    put:
      tags:
        - Customer
        - Customer Notification
      security:
        - CustomerAccessTokenAuth: []
      description: API to get update specific notification status isRead to be true by id
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Succes to update notification status
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          notificationId:
                            type: string
                        required:
                          - notificationId
                    required:
                      - success
                      - message
                      - data
              example:
                {
                  "success": true,
                  "message": "Updating notification status successfully.",
                  "data":
                    { "notificationId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                {
                  "success": false,
                  "message": "notificationId param is missing.",
                }
        "401":
          $ref: "#/components/responses/RestoAccessTokenError"
        "403":
          $ref: "#/components/responses/RestoVerificationAndMinimumSetupMiddlewareError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorAPIResponse"
              example:
                { "success": false, "message": "Notification is not found." }
        "500":
          $ref: "#/components/responses/ServerError"
  /notifications/count:
    get:
      tags:
        - Customer
        - Customer Notification
      description: API to get total unread notification
      security:
        - RestoAccessTokenAuth: []
      responses:
        "200":
          description: Success to get total unread notifcation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          unreadNotification:
                            type: number
                        required:
                          - unreadNotification
                    required:
                      - success
                      - message
                      - data
              example:
                {
                  "success": true,
                  "message": "Success to get the number of unread notification data.",
                  "data": { "unreadNotification": 5 },
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "403":
          $ref: "#/components/responses/CustomerEmailNotVerifiedError"
        "500":
          $ref: "#/components/responses/ServerError"
  /refresh-token/{refreshTokeValidator}/{token}:
    get:
      tags:
        - Customer
        - Customer Notification
      security:
        - CustomerAccessTokenAuth: []
      description: Generate new customer access token through refresh token
      parameters:
        - name: refreshTokeValidator
          in: path
          required: true
          description: Generate code because access token is expired
          schema:
            type: string
        - name: token
          in: path
          required: true
          description: The actual refresh token
          schema:
            type: string
      responses:
        "200":
          description: Success to get new access token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          userId:
                            type: string
                            description: new generated contain customer id token
              example:
                {
                  "success": true,
                  "message": "Refresh token is valid.",
                  "data": { "userId": "550e8400-e29b-41d4-a716-44665544000" },
                }
        "401":
          $ref: "#/components/responses/CustomerAccessTokenError"
        "500":
          $ref: "#/components/responses/ServerError"
components:
  securitySchemes:
    RestoAccessTokenAuth:
      description: Access token for user resto
      type: apiKey
      in: cookie
      name: iDontWannaShareItIThinkItsshouldbesafe
    CustomerAccessTokenAuth:
      description: Access token for user customer
      type: apiKey
      in: cookie
      name: iDontWannaShareItIThinkItsshouldbesafe
  parameters:
    ProvinceId:
      name: provinceId
      in: query
      required: true
      description: Province id
      schema:
        type: string
        nullable: false
        default:
    UniqueString:
      name: uniqueString
      in: path
      required: true
      description: unique string uuid v4
      schema:
        type: string
    EtalaseId:
      name: etalaseId
      in: path
      required: true
      description: unique string uuid v4
      schema:
        type: string
    CategoryId:
      name: categoryId
      in: path
      description: Custom Menu Category Id
      required: true
      schema:
        type: string
    OrderId:
      name: orderId
      in: path
      required: true
      description: Order id
      schema:
        type: string
    BotramOrderId:
      name: botramOrderId
      in: path
      required: true
      description: Botram Order id
      schema:
        type: string
    CustomMenuCompositionId:
      name: compositionId
      in: path
      required: true
      description: Custom Menu Composition Id
      schema:
        type: string
    ReviewId:
      name: reviewId
      in: path
      required: true
      description: Review id
      schema:
        type: string
    CustomMenuId:
      name: customMenuId
      in: path
      required: true
      description: Custom menu id
      schema:
        type: string
    ReviewResponseId:
      name: responseId
      in: path
      required: true
      description: Review Response id
      schema:
        type: string
    InvitationId:
      name: invitationId
      in: path
      required: true
      description: Invitation id
      schema:
        type: string
    BotramId:
      name: botramId
      in: path
      required: true
      schema:
        type: string
    MemberBotramId:
      name: memberId
      in: path
      required: true
      schema:
        type: string
    MyCartId:
      name: myCartId
      in: path
      required: true
      schema:
        type: string
    BotramCartId:
      name: botramCartId
      in: path
      required: true
      schema:
        type: string
    RestaurantUsername:
      name: restaurantUsername
      in: path
      required: true
      schema:
        type: string
    LimitPagination:
      name: limit
      in: query
      required: false
      description: limit of displayed data
      schema:
        type: string
        default: "10"
    PagePagination:
      name: page
      in: query
      required: false
      description: limit of displayed data
      schema:
        type: string
        default: "1"
  schemas:
    BotramMemberOrder:
      type: object
      properties:
        memberDetail:
          type: object
          properties:
            id:
              type: string
            status:
              type: string
              enum:
                - NOT_JOIN_YET
                - ORDERING
                - ORDER_READY
                - EXIT
                - EXPELLED
            name:
              type: string
            username:
              type: string
        order:
          type: object
          properties:
            id:
              description: Order id
              type: string
            total:
              type: number
            isPaid:
              type: boolean
            orderedMenus:
              type: array
              items:
                type: object
                properties:
                  id:
                    description: Ordered Menu id
                    type: string
                  menu:
                    type: object
                    properties:
                      id:
                        description: Menu id
                        type: string
                      name:
                        type: string
                      price:
                        type: number
                  quantity:
                    description: Ordered Menu quantity
                    type: number
                  totalPrice:
                    description: menu price time quantity
                    type: number
                  isDibungkus:
                    type: boolean
                  spicyLevel:
                    type: boolean
                    nullable: true
            orderedCustomMenus:
              type: array
              items:
                type: object
                properties:
                  id:
                    description: Ordered Menu id
                    type: string
                  customMenu:
                    type: object
                    properties:
                      id:
                        description: Custom menu id
                        type: string
                      name:
                        type: string
                      price:
                        type: number
                  quantity:
                    description: Ordered Custom menu quantity
                    type: number
                  totalPrice:
                    description: Custom menu price time quantity
                    type: number
                  isDibungkus:
                    type: boolean
                  spicyLevel:
                    type: boolean
                    nullable: true
    BotramGroupStatus:
      description: Botram group status
      type: string
      enum:
        - ORDERING
        - ALL_READY_ORDER
        - DONE
    BotramGroupHighlightDetail:
      type: object
      properties:
        id:
          type: string
          description: Inivitation id
        groupBotram:
          type: object
          properties:
            id:
              type: string
              description: Botram group id
            createdAt:
              type: string
            name:
              type: string
            restaurant:
              type: object
              properties:
                id:
                  type: string
                  description: Restaurant id
                name:
                  type: string
                username:
                  type: string
            status:
              $ref: "#/components/schemas/BotramGroupStatus"
            admin:
              type: object
              properties:
                username:
                  type: string
                name:
                  type: string
            memberCount:
              type: number
    CartItemList:
      type: object
      properties:
        menuCarts:
          type: array
          items:
            type: object
            properties:
              id:
                description: MenuCart Id
                type: string
              menu:
                type: object
                properties:
                  id:
                    description: Menu Id
                    type: string
                  name:
                    type: string
                  price:
                    type: number
              isDibungkus:
                type: boolean
              quantity:
                type: number
              spicyLevel:
                nullable: true
                type: number
        customMenuCarts:
          type: array
          items:
            type: object
            properties:
              id:
                description: Custom Menu Cart Id
                type: string
              menu:
                type: object
                properties:
                  id:
                    description: Custom Menu Id
                    type: string
                  name:
                    type: string
                  price:
                    type: number
              isDibungkus:
                type: boolean
              quantity:
                type: number
              spicyLevel:
                nullable: true
                type: number
    MyCartResponse:
      type: object
      properties:
        restaurantCount:
          type: number
        cart:
          type: array
          items:
            type: object
            properties:
              restaurant:
                type: object
                properties:
                  id:
                    type: string
                  username:
                    type: string
                  name:
                    type: string
                  image:
                    type: string
              totalItem:
                type: number
    ErrorAPIResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
      required:
        - success
        - message
    SuccessAPIResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          oneOf:
            - type: array
            - type: object
      required:
        - success
        - message
    SuccessAPIReturnUserIdResponse:
      allOf:
        - $ref: "#/components/schemas/SuccessAPIResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                userId:
                  type: string
              required:
                - userId
      required:
        - success
        - message
        - data
    SuccessAPIReturnEtalaseIdResponse:
      allOf:
        - $ref: "#/components/schemas/SuccessAPIResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                etalaseId:
                  type: string
              required:
                - etalaseId
          required:
            - success
            - message
            - data
    ValidationErrorAPIResponse:
      allOf:
        - $ref: "#/components/schemas/ErrorAPIResponse"
        - type: object
          properties:
            errors:
              type: array
              items:
                type: object
                properties:
                  message:
                    type: string
                  field:
                    type: string
      required:
        - success
        - message
        - errors
    SuccessSigninResponse:
      allOf:
        - $ref: "#/components/schemas/SuccessAPIResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                userId:
                  type: string
                token:
                  type: string
    RestoName:
      type: string
      minLength: 3
      maxLength: 50
      pattern: /^[a-zA-Z0-9.,_\s-]+$/
    Username:
      type: string
      minLength: 3
      maxLength: 30
      pattern: /^[a-z0-9._']+$/
    Email:
      type: string
      minLength: 1
      maxLength: 254
    Password:
      type: string
      minLength: 6
    Avatar:
      type: string
    VillageId:
      type: string
    RestoLocationLink:
      type: string
      nullable: true
    RestoDetail:
      type: string
      maxLength: 200
      nullable: true
    RestoContact:
      type: string
      maxLength: 14
      nullable: true
    RestoImageGallery:
      type: array
      items:
        type: string
      maxItems: 5
    RestoOpeningHour:
      type: string
      maxLength: 5
      pattern: /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/
      nullable: true
    RestoClosingHour:
      type: string
      maxLength: 5
      pattern: /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/
      nullable: true
    RestoDaysOff:
      type: array
      items:
        type: string
        enum:
          - sunday
          - monday
          - tuesday
          - wednesday
          - thursday
          - friday
          - saturday
          - sunday
    RestoFasilities:
      type: array
      items:
        type: string
      maxItems: 100
    OrderDetailResponse:
      allOf:
        - $ref: "#/components/schemas/SuccessAPIResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                id:
                  type: string
                createdAt:
                  type: string
                isGroup:
                  type: boolean
                customer:
                  type: object
                  properties:
                    username:
                      type: string
                    name:
                      type: string
                status:
                  type: boolean
                isPaid:
                  type: boolean
                orderedMenu:
                  type: object
                  properties:
                    id:
                      type: string
                    menuId:
                      type: string
                    menuName:
                      type: string
                    menuPrice:
                      type: number
                    quantity:
                      type: number
                    totalPrice:
                      type: number
                    isDibungkus:
                      type: boolean
                    spicyLevel:
                      type: number
                      nullable: true
    OrderSuccessResponse:
      allOf:
        - $ref: "#/components/schemas/SuccessAPIResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                accepted:
                  type: number
                processed:
                  type: number
                done:
                  type: number
                cancel:
                  type: number
                total:
                  type: number
              required:
                - accepted
                - processed
                - done
                - cancel
                - total
          required:
            - success
            - message
            - data
    ReviewRestaurantDetail:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
        rating:
          type: number
        description:
          type: string
        reviewer:
          type: object
          properties:
            username:
              type: string
            name:
              type: string
            everShoppingHere:
              type: boolean
    CreateOrderBodyPayload:
      type: object
      properties:
        customerNote:
          type: string
          maxLength: 100
        orderedItemList:
          type: object
          properties:
            menu:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  isDibungkus:
                    type: boolean
                  quantity:
                    type: number
                    minimum: 1
                  spicyLevel:
                    type: number
                required:
                  - id
                  - isDibungkus
                  - quantity
            customMenu:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  isDibungkus:
                    type: boolean
                  quantity:
                    type: number
                    minimum: 1
                  spicyLevel:
                    type: number
                required:
                  - id
                  - isDibungkus
                  - quantity
          required:
            - menu
            - customMenu
    OrderListItemNotBotramResponse:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
        isGroup:
          type: boolean
        restaurant:
          type: object
          properties:
            id:
              type: string
            username:
              type: string
            name:
              type: string
        total:
          type: number
        isPaid:
          type: boolean
        status:
          type: string
          enum:
            - READY_TO_ORDER
            - ACCEPTED_BY_RESTO
            - PROCESSED_BY_RESTO
            - DONE_BY_RESTO
            - CANCEL_BY_RESTO
        queueNumber:
          nullable: true
          type: number
    OrderDetailItemNotBotramResponse:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
        isGroup:
          type: string
        restaurant:
          type: object
          properties:
            id:
              type: string
            username:
              type: string
            name:
              type: string
        total:
          type: number
        status:
          type: string
          enum:
            - READY_TO_ORDER
            - ACCEPTED_BY_RESTO
            - PROCESSED_BY_RESTO
            - DONE_BY_RESTO
            - ACCEPTED_BY_CUSTOMER
            - CANCEL_BY_RESTO
        isPaid:
          type: boolean
        orderedMenu:
          type: array
          items:
            $ref: "#/components/schemas/OrderedMenuResponse"
        orderedCustomMenu:
          type: array
          items:
            $ref: "#/components/schemas/OrderedCustomMenuResponse"
        queueNumber:
          nullable: true
          type: number
    OrderDetailItemBotramResponse:
      allOf:
        - $ref: "#/components/schemas/OrderDetailItemNotBotramResponse"
        - type: object
          properties:
            botramGroup:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
    OrderedMenuResponse:
      type: object
      properties:
        id:
          type: string
        menu:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            price:
              type: string
        quantity:
          type: number
        totalPrice:
          type: number
        isDibungkus:
          type: boolean
        spicyLevel:
          nullable: true
          type: number
    OrderedCustomMenuResponse:
      type: object
      properties:
        id:
          type: string
        customMenu:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            price:
              type: string
        quantity:
          type: number
        totalPrice:
          type: number
        isDibungkus:
          type: boolean
        spicyLevel:
          nullable: true
          type: number
    PurchaseOrderNotBotramItemResponse:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
        isGroup:
          type: string
        restaurant:
          type: object
          properties:
            id:
              type: string
            username:
              type: string
            name:
              type: string
        isPaid:
          type: boolean
        status:
          type: string
          default: ACCEPTED_BY_CUSTOMER
        total:
          type: number
    PurchaseOrderBotramItemResponse:
      allOf:
        - $ref: "#/components/schemas/PurchaseOrderNotBotramItemResponse"
        - type: object
          properties:
            botramGroup:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
  examples:
    # error response
    AuthenticationError:
      value:
        {
          "success": false,
          "message": "Access denied. Please authenticate to access this resource.",
        }
    AuthenticationErrorAccessTokenExpired:
      value:
        {
          "success": false,
          "message": "Token is expired.",
          "data": { "token": "550e8400-e29b-41d4-a716-44665544000" },
        }
    AuthenticationErrorRefreshTokenExpired:
      value:
        {
          "success": false,
          "message": "Token is expired.",
          "data": { "token": "550e8400-e29b-41d4-a716-44665544000" },
        }
    RestoEmailIsNotVerifiedError:
      value:
        {
          "success": true,
          "message": "Access denied. Please verify your email.",
        }
    RestoMinimumSetupError:
      value:
        {
          "success": false,
          "message": "Your account has not completed the minimum profile setup. Please complete your profile before using the application features.",
        }
    CustomerEmailIsNotVerifiedError:
      value:
        {
          "success": true,
          "message": "Access denied. Please verify your email.",
        }
    # success response
    SuccessSigninResponse:
      value:
        {
          "success": true,
          "message": "Signin successfully.",
          "data":
            {
              "userId": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
              "token": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            },
        }
    PersonalOrderDetailResponse:
      value:
        {
          "success": true,
          "message": "Getting order data successfully.",
          "data":
            {
              "_id": "5f8a5c8e8e78d53e610cd75f",
              "createdAt": "2023-07-20T12:34:56.789Z",
              "isGroup": false,
              "customer": { "username": "melanie", "name": "Melanie" },
              "status": "accepted",
              "isPaid": true,
              "orderedMenu":
                [
                  {
                    "_id": "5f8a5c8e8e78d53e610cd75f",
                    "menuId": "5f8a5c8e8e78d53e610cd75f",
                    "menuName": "Seblak Ceker",
                    "menuPrice": 4000,
                    "quantity": 1,
                    "totalPrice": 4000,
                    "isDibungkus": false,
                    "spicyLevel": { "level": 1 },
                  },
                  {
                    "_id": "5f8a5c8e8e78d53e610cd75f",
                    "menuId": "5f8a5c8e8e78d53e610cd75f",
                    "menuName": "Seblak Ceker",
                    "menuPrice": 4000,
                    "quantity": 2,
                    "totalPrice": 8000,
                    "isDibungkus": false,
                    "spicyLevel": { "level": 5 },
                  },
                  {
                    "_id": "5f8a5c8e8e78d53e610cd75f",
                    "menuId": "5f8a5c8e8e78d53e610cd75f",
                    "menuName": "Es Jeruk",
                    "menuPrice": 2000,
                    "quantity": 1,
                    "totalPrice": 2000,
                    "isDibungkus": false,
                    "spicyLevel": null,
                  },
                ],
              "orderedCustomMenu": [],
            },
        }
    GroupBotramOrderDetailResponse:
      value:
        {
          "success": true,
          "message": "Getting order data successfully.",
          "data":
            {
              "_id": "5f8a5c8e8e78d53e610cd75f",
              "createdAt": "2023-07-20T12:34:56.789Z",
              "isGroup": true,
              "groupBotram":
                {
                  "_id": "5f8a5c8e8e78d53e610cd75f",
                  "name": "Makan Besar",
                  "admin": { "username": "melanie", "name": "Melanie" },
                },
              "status": "done",
              "isPaid": false,
              "memberOrder":
                [
                  {
                    "member": { "username": "melanie", "name": "Melanie" },
                    "order":
                      {
                        "isPaid": false,
                        "orderedMenu":
                          [
                            {
                              "_id": "5f8a5c8e8e78d53e610cd75f",
                              "menuId": "5f8a5c8e8e78d53e610cd75f",
                              "menuName": "Seblak Ceker",
                              "menuPrice": 4000,
                              "quantity": 1,
                              "totalPrice": 4000,
                              "isDibungkus": false,
                              "spicyLevel": { "level": 1 },
                            },
                            {
                              "_id": "5f8a5c8e8e78d53e610cd75f",
                              "menuId": "5f8a5c8e8e78d53e610cd75f",
                              "menuName": "Es Jeruk",
                              "menuPrice": 2000,
                              "quantity": 1,
                              "totalPrice": 2000,
                              "isDibungkus": false,
                              "spicyLevel": null,
                            },
                          ],
                        "orderedCustomMenu":
                          [
                            {
                              "_id": "5f8a5c8e8e78d53e610cd75f",
                              "customMenuId": "5f8a5c8e8e78d53e610cd75f",
                              "customMenuName": "Es Jeruk",
                              "customMenuPrice": 2000,
                              "quantity": 1,
                              "totalPrice": 2000,
                              "isDibungkus": false,
                              "spicyLevel": null,
                            },
                          ],
                      },
                  },
                ],
            },
        }
  requestBodies:
    CreateAndUpdateEtalase:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                minLength: 1
                maxLength: 20
            required:
              - name
          example: { "name": "Makanan" }
    CreateAndUpdateMenu:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                minLength: 1
                maxLength: 80
                pattern: /^[a-zA-Z0-9.'\s-]+$/
              isBungkusAble:
                type: boolean
              description:
                type: string
                minLength: 1
                maxLength: 3000
              etalaseId:
                type: string
              price:
                type: number
              images:
                type: array
                items:
                  type: string
                minItems: 1
                maxItems: 5
              maxSpicy:
                type: number
                nullable: true
                default: null
            required:
              - name
              - isBungkusAble
              - description
              - etalaseId
              - price
              - images
          example:
            {
              "name": "Nama menu",
              "isBungkusable": true,
              "description": "Menu ini adalah bla blabla",
              "etalaseId": "61472bb0804c197c43e92d6a",
              "price": 5000,
              "stock": 10,
              "images": ["http://image.example.com/image.jpg"],
              "maxSpicy": 2,
            }
    CreateAndUpdateCustomMenuCategory:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                minLength: 1
                maxLength: 50
              isBungkusAble:
                type: boolean
                default: false
              maxSpicy:
                type: number
                nullable: true
            required:
              - name
    CreateAndUpdateCustomMenuComposition:
      content:
        application/json:
          schema:
            type: object
            properties:
              customMenuCategoryId:
                type: string
              name:
                type: string
                minLength: 1
                maxLength: 80
              description:
                type: string
                minLength: 1
                maxLength: 3000
              price:
                type: number
              images:
                type: array
                items:
                  type: string
                minItems: 1
                maxItems: 2
              stock:
                type: number
                default: 0
            required:
              - customMenuCategoryId
              - name
              - description
              - price
              - images
          example:
            {
              "restaurantId": "5f8a5c8e8e78d53e610cd75f",
              "customMenuCateogryId": "5f8a5c8e8e78d53e610cd75f",
              "name": "Seblak Bikinan ku yang paling uncchhh",
              "pickedCustomMenuComposition":
                [
                  { "_id": "5f8a5c8e8e78d53e610cd75f", "qty": 10 },
                  { "_id": "5f8a5c8e8e78d53e610cd75f", "qty": 1 },
                  { "_id": "5f8a5c8e8e78d53e610cd75f", "qty": 5 },
                ],
            }
    CreateAndUpdateReviewResponse:
      content:
        application/json:
          schema:
            type: object
            properties:
              responseDescription:
                type: string
                minLength: 1
                maxLength: 250
          example:
            {
              "responseDescription": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer auctor, massa et ultrices vehicula, urna tortor dictum sapien, id vestibulum tortor ligula ut urna. Sed consequat neque non nibh eleifend consectetur. Aliquam erat volutpat. Aliquam vitae sem elit. Vestibulum faucibus tempus libero ut aliquet. Morbi ullamcorper id libero eu dapibus. Ut neque diam, eleifend at nisi at, semper tempus nisi. Quisque at dolor vel mi mollis dapibus et quis orci. Morbi ut eros sit amet sapien tempus eleifend.",
            }
    CreateAndUpdateReview:
      content:
        application/json:
          schema:
            type: object
            properties:
              rating:
                type: string
                description: Kenapa pake string? biar mudah validation nya bos (kata tim BE)
                enum:
                  - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
              description:
                type: string
                maxLength: 250
          example:
            { "rating": 5, "description": "Mantaaaaaaaaaaaaaaaaaaaaaaaaap" }
  responses:
    RestoAccessTokenError:
      description: Access Token Error
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/ErrorAPIResponse"
              - allOf:
                  - $ref: "#/components/schemas/ErrorAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                    required:
                      - success
                      - message
          examples:
            AuthenticationError:
              $ref: "#/components/examples/AuthenticationError"
            AuthenticationErrorAccessTokenExpired:
              $ref: "#/components/examples/AuthenticationErrorAccessTokenExpired"
            AuthenticationErrorRefreshTokenExpired:
              $ref: "#/components/examples/AuthenticationErrorRefreshTokenExpired"
    RestoConflictError:
      description: Conflict Error. Duplicate username or email
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorAPIResponse"
          examples:
            Username:
              value:
                {
                  "success": false,
                  "message": "username is exist. Please use another.",
                }
            Email:
              value:
                {
                  "success": false,
                  "message": "email is exist. Please use another.",
                }
    RestoVerificationAndMinimumSetupMiddlewareError:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorAPIResponse"
          examples:
            RestoEmailIsNotVerifiedError:
              $ref: "#/components/examples/RestoEmailIsNotVerifiedError"
            RestoMinimumSetupError:
              $ref: "#/components/examples/RestoMinimumSetupError"
    CustomerAccessTokenError:
      description: Access Token Error
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/ErrorAPIResponse"
              - allOf:
                  - $ref: "#/components/schemas/ErrorAPIResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                    required:
                      - success
                      - message
          examples:
            AuthenticationError:
              $ref: "#/components/examples/AuthenticationError"
            AuthenticationErrorAccessTokenExpired:
              $ref: "#/components/examples/AuthenticationErrorAccessTokenExpired"
            AuthenticationErrorRefreshTokenExpired:
              $ref: "#/components/examples/AuthenticationErrorRefreshTokenExpired"
    CustomerConflictError:
      description: Conflict Error. Duplicate username or email
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorAPIResponse"
          examples:
            Username:
              value:
                {
                  "success": false,
                  "message": "username is exist. Please use another.",
                }
            Email:
              value:
                {
                  "success": false,
                  "message": "email is exist. Please use another.",
                }
    CustomerEmailNotVerifiedError:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorAPIResponse"
          example:
            $ref: "#/components/examples/CustomerEmailIsNotVerifiedError"
    CustomerEmailAndMembershipBotramNotFound:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorAPIResponse"
          examples:
            Email Not Verified:
              $ref: "#/components/examples/CustomerEmailIsNotVerifiedError"
            Membership Not Found:
              value: { "success": false, "message": "Membership is not found." }
    CustomerEmailAndBotramMemberMiddlewareError:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorAPIResponse"
          examples:
            Email is Not Verified:
              value:
                $ref: "#/components/examples/CustomerEmailIsNotVerifiedError"
            Customer is Not Member:
              value:
                {
                  "success": false,
                  "message": "Customer is not part of member. Access to this resource is forbidden.",
                }
    CustomerEmailAndBotramAdminMiddlewareError:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorAPIResponse"
          examples:
            Email is Not Verified:
              value:
                $ref: "#/components/examples/CustomerEmailIsNotVerifiedError"
            Not Admin:
              value:
                {
                  "success": false,
                  "message": "Only for admin of botram group. Access to this resource is forbidden.",
                }
    ServerError:
      description: Error response if some unknown error happen to the server
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorAPIResponse"
          example:
            {
              "success": false,
              "message": "Something went wrong. Try again later.",
            }
    UpdateOrderStatusBadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorAPIResponse"
          examples:
            Invalid Status Body Payload:
              value:
                {
                  "success": false,
                  "message": "status body payload is invalid.",
                }
            Invalid Accepted Status:
              value:
                {
                  "success": false,
                  "message": "status body payload is invalid. ACCEPTED is allowed if status order is READY_TO_ORDER.",
                }
            Invalid Processed Status:
              value:
                {
                  "success": false,
                  "message": "status body payload is invalid. PROCESSED is allowed if status order is ACCEPTED_BY_RESTO.",
                }
            Invalid Done Status:
              value:
                {
                  "success": false,
                  "message": "status body payload is invalid. DONE is allowed if status order is PROCESSED_BY_RESTO.",
                }
            Invalid CANCEL Status:
              value:
                {
                  "success": false,
                  "message": "status body payload is invalid. CANCEL is allowed if status order is PROCESSED_BY_RESTO.",
                }
            Menu Stock is running out:
              value:
                {
                  "success": false,
                  "message": "Menu stock is running out. Please try again later.",
                }
            Custom Menu Composition Stock is running out:
              value:
                {
                  "success": false,
                  "message": "Custom Menu Composition is run out of stock. Please try again later.",
                }
